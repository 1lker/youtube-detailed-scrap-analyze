{
    "comments": [
        {
            "comment_text": "I think the take on mongoDB is actually legit. While there is a use case for it, 99% who use it just don't understand the relational model. Codd's paper from the 1970s!!! describes why the model of something like mongoDB is inferior to the relational model.",
            "author": "@frederickmueller7916",
            "like_count": 0,
            "published_at": "2024-11-04T10:49:37Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Ive heard Julia is the fastest. So Ive heard.",
            "author": "@oliveiraluis3540",
            "like_count": 0,
            "published_at": "2024-11-02T16:00:17Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I was trying to learn Rust but the learning curve outweighs the performance gains / type safety that you get with it. So I ended up just learning Java / Kotlin instead as its more useful and production friendly.",
            "author": "@riseup902",
            "like_count": 0,
            "published_at": "2024-10-30T14:22:59Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Google used rust in android and they benefited from it. You used rust, and you regret it. \n\nProbably it's your fault",
            "author": "@arijitkundu1653",
            "like_count": 1,
            "published_at": "2024-10-30T13:04:36Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "When I search Google for ‘Readable test by example,’ I find articles about writing tests using DSLs that read like natural text.\n\nHow can I achieve this in Rust? I assume it’s probably not possible to get the same results.",
            "author": "@cya3mdirl158",
            "like_count": 0,
            "published_at": "2024-10-30T08:06:49Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "gotta use the tools given to you and if you don't wanna use them there is no point in using the language. morale of the story make sure you like a languages semantics before you rewrite your project in it.",
            "author": "@timtom-d5n",
            "like_count": 0,
            "published_at": "2024-10-29T02:06:07Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "He should have chosen GO instead!😉",
            "author": "@knofi7052",
            "like_count": 0,
            "published_at": "2024-10-28T08:48:24Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I don't know Rust at all, but It seem weird to me to pick a language that specifically drops garbage collection for certain reasons, and then be angry at it for not going the easy route and have garbage collection. Seems like the guy didn't do any research but only listened to hype, and was disappointed.",
            "author": "@MortenBendiksen",
            "like_count": 0,
            "published_at": "2024-10-27T23:03:10Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Last observation is that I don't think enough of the glowing articles and videos about Rust focus on these challenges. There is not enough emphasis that rust development kind of needs to be focused on a niche where the performance benefits and long term reliability outweigh the cost of half a year skilling up your dev team before they can really leverage those benefits. That's a pretty high bar, and definitely something I will be considering for any platform development work I will be leading going forward. So... informative!",
            "author": "@jamescomstock7299",
            "like_count": 0,
            "published_at": "2024-10-25T19:18:45Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "After reading through the comments on this video, the complaint about the Rust community looks pretty legit, sadly.",
            "author": "@jamescomstock7299",
            "like_count": 0,
            "published_at": "2024-10-25T18:51:16Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "Going to disagree with your \"skill issue\" statement regarding error handling. Any language that takes a YEAR to grok error handling has more problems than \"skill issue\". When a team chooses to adopt a new tool, waiting a year to reach full productivity is not a viable option.",
            "author": "@jamescomstock7299",
            "like_count": 0,
            "published_at": "2024-10-25T18:42:31Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I love c, it lets me get into trouble and do crazy things. I am too old and lazy to learn rust.",
            "author": "@rayujohnson1302",
            "like_count": 0,
            "published_at": "2024-10-23T02:12:57Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "ah yes Rust\nNSA's backdoor",
            "author": "@abeerharoon2176",
            "like_count": 0,
            "published_at": "2024-10-22T17:28:19Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "What was the assert lecture mentioned? \nCan someone please share the link?",
            "author": "@ivanily4",
            "like_count": 0,
            "published_at": "2024-10-21T04:58:06Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Having seen the guy's threads on reddit, here's a timeline:\n\n1. Guy starts re-writing his platform in rust, runs into problems pretty much immediately (brand-new to rust)\n2a. Goes on reddit to complain and calls rust terrible. Is called out for it (rightly, because he doesn't know rust yet; but he gets some help, too) alongside some comments about the db of choice\n2b. I think he wrote an article calling the community shitty.\n3. Toughs it out for 4 months or something like that, finishes.\n4. Writes another article (this one) about how the community is shitty\n5. posts said article on reddit\n\nRust definitely has its issues (and I say that as a mainly rust programmer), but this guy's criticisms aren't really it. There are some genuinely good criticisms of rust; the *most upvoted post on the subreddit* is a criticism. So either the community changed between that post and this guy's posts, or this guy just goes in to antagonize an entire community and then cries about it on medium.",
            "author": "@robertsjoblom9279",
            "like_count": 0,
            "published_at": "2024-10-20T21:21:48Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "From my limited time with Rust, I do have to agree with the point about the syntax though.\nIn mission-critical software, writing in Ada or SPARK is very common. In those languages you also \"literally cannot get the code to compile\" for some time when you're starting out.\nRust similarly prioritizes safety and catching errors at the compiler level, but the syntax is just effin unreadable to me. Ada reads like a book, extremely clean and obvious what's going on; even large code blocks or libraries. Rust? It's like someone threw Scala's syntax, mixed it with Perl and added some Lua for good measure. It's total gibberish to me.",
            "author": "@Yumari-Mai",
            "like_count": 0,
            "published_at": "2024-10-20T01:06:05Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Alot of people who comment on Rust have never used it as a professional programmer. Those who do, are too busy building the worlds next generation systems and rewriting the crap ones",
            "author": "@CSgof___yourself",
            "like_count": 1,
            "published_at": "2024-10-19T18:26:14Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "18 months just not enough",
            "author": "@yakman8681",
            "like_count": 0,
            "published_at": "2024-10-19T17:26:44Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Such a pitty that Rust became infected with the async virus, and the associated toxic async fanbois.",
            "author": "@davidboreham",
            "like_count": 0,
            "published_at": "2024-10-17T15:18:57Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Ok, so the healthy response to any \"skill issue\" with a user of a language, is to understand that it IMPLIES a skill issue with the language design as well.  Even if it is small, and 'fixing it' can't be achieved yet.\n\nIt's that pit of success thing you were speaking on. It is literally the language's (or its designer's rather) job to make it as usable as possible. As such, every time you say \"skill issue\", if you are right, then you are criticizing the usability of the language. Maybe not very harshly(I'm incredibly stupid sometimes, and Im pretty sure im not the absolute dumbest person out there, which is terrifying to me, but obviously some languages would only be hurt by dumbing them down), but still, it's like blaming gamers for not liking a game you made.... \n\nNo, any dislike of the product falls on the producer of the product as well as the consumer. Just like any enjoyment of the product. You don't get to pick and choose. You just get to weigh the importance of each criticism against others. A lot of people like rust. You don't get to state that honestly, unless you also state the problems people have with it.\n\n\nOr you can just be disingenuous. It feels great. Doesn't tend to work well long term though.",
            "author": "@vyrv6719",
            "like_count": 0,
            "published_at": "2024-10-16T17:58:41Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "I'm not a rust dev at all, but it just seems like the guy wanted to rewrite his system in rust without properly learning rust and is angry that he doesn't understand rust.",
            "author": "@Rusty254",
            "like_count": 1,
            "published_at": "2024-10-16T08:38:25Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "As mainly a Python programmer, I totally get missing stack traces and inspectability. Also, the fact that Rust will panic on integer overflow without the type checker warning me at all is super scary. Error handling has lovely patterns in Rust, but it's not AS safe as the meme implies (esp. since many popular libraries are also using unsafe).",
            "author": "@Zeedox",
            "like_count": 0,
            "published_at": "2024-10-15T06:45:08Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "C++ all the way.",
            "author": "@m.x.",
            "like_count": 0,
            "published_at": "2024-10-15T02:04:50Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Now that hating Rust is finally reaching mass adoption, I’m rebranding to “mild indifference”",
            "author": "@binary132",
            "like_count": 0,
            "published_at": "2024-10-14T12:30:50Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Comment section experts  vote now :   Rust or Go???",
            "author": "@mbusodlamini4466",
            "like_count": 0,
            "published_at": "2024-10-13T14:51:14Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "so many words anout great rust, and no evidence why it is so great. Lang is shitty.",
            "author": "@ievgenmajor3301",
            "like_count": 0,
            "published_at": "2024-10-13T11:13:54Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "You can still implement helper functions in Rust even if you haven't fully wrapped your head around every single bit of its signature. Simply add the bits when the compiler tells you to as you reference the function elsewhere on the code. This approach has always worked for me.",
            "author": "@RandomHandle120",
            "like_count": 1,
            "published_at": "2024-10-13T02:34:38Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Those of us with long memories remember Ada type equivalence....",
            "author": "@nfcpro",
            "like_count": 0,
            "published_at": "2024-10-13T02:06:40Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Do you even need to read the comments? You know its gonna be filled with rustaceans losing their collective shit.",
            "author": "@marcushansen1836",
            "like_count": 0,
            "published_at": "2024-10-13T00:21:25Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "If the author already implemented a bad product,then problem is in author, not a programming platform/language etc",
            "author": "@ConstantineGladky",
            "like_count": 0,
            "published_at": "2024-10-12T20:15:57Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "No one dunks on c++!",
            "author": "@metallitech",
            "like_count": 1,
            "published_at": "2024-10-12T17:12:01Z",
            "sentiment": "LABEL_2",
            "emotion": "anger"
        },
        {
            "comment_text": "Rodriguez Susan Thomas Thomas Hall Kenneth",
            "author": "@MariaThompson-d7y",
            "like_count": 0,
            "published_at": "2024-10-06T11:10:57Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "But... but MongoDB does suck! Its C++ API requires the client to depend on Boost libraries, and then there is that fugly binary json format you are rectally fed. And then at some point you realize that there are trade-offs between SQL and NoSQL, but in the end, on average, performance is about the same (for most cases). At least with Postgres i have a simple familiar API with human readable SQL...",
            "author": "@alexandrekharlamov150",
            "like_count": 1,
            "published_at": "2024-10-06T08:40:29Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Bro posts about rust so much 😂",
            "author": "@HonkyTonkWhiteBoi",
            "like_count": 0,
            "published_at": "2024-10-06T01:02:12Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I know I might get flamed, but I like go over rust",
            "author": "@alek002",
            "like_count": 1,
            "published_at": "2024-10-03T20:53:28Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "in that time you can just learn good c code. Most people quit quickly (me included)",
            "author": "@mariotabali2603",
            "like_count": 0,
            "published_at": "2024-09-30T03:23:54Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I never had issues with c++",
            "author": "@jamespong6588",
            "like_count": 0,
            "published_at": "2024-09-29T20:17:10Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Zig",
            "author": "@ian3084",
            "like_count": 0,
            "published_at": "2024-09-29T17:47:16Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "why does he always highlight text like that - i feel like a normie who's missing a joke",
            "author": "@kiunthmo",
            "like_count": 0,
            "published_at": "2024-09-28T18:58:26Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "I love listening to Prime so that can have hot takes about things I understand nothing about (yet).",
            "author": "@TheBassteban",
            "like_count": 0,
            "published_at": "2024-09-27T18:55:44Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "The comments make me feel called out.. I started to \"learn rust\" by trying to refactor quite an extensive API that I had already made with Python, Node Express and .NET (C#) earlier.. did it backslap me hard after few weeks, when every step forward meant going 10 backwards in some other area... Should have taken the noob courses, instead of jumping into \"I'm a programmer already, I don't NEED to know the basics'\" -attitude :)",
            "author": "@Widiar0",
            "like_count": 0,
            "published_at": "2024-09-27T12:14:36Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "Experience is NOT the same as skill. 😒",
            "author": "@MarkMYoung",
            "like_count": 0,
            "published_at": "2024-09-27T04:10:15Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "34:31 Toxic community Exhibit A.",
            "author": "@TwoDozenSigma",
            "like_count": 1,
            "published_at": "2024-09-27T02:11:53Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I don't like having to Arc<Mutex<Blah in Rust when all I want is just to share a common flag between some blocking threads (thus couldn't careless about synchronization) and only one thread is writng—the main thrad (thus no UB), so you know what I do? Raw pointers. Gets the job done. But of course I have to transmute it to usize back and forth to bypass Rust's \"NO POINTERS BETWEEN THREADS FUKING ALLOWED!!1!\"; like goddamn, Rust is honestly the worst language when it comes to actually writing code that cares about the CPU, and I come from C.",
            "author": "@nullbeyondo",
            "like_count": 0,
            "published_at": "2024-09-26T10:58:07Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Rust is poop",
            "author": "@mrfarts5176",
            "like_count": 0,
            "published_at": "2024-09-25T14:30:33Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "here we go another youtube channel that just reads articles off the screen.",
            "author": "@turdwarbler",
            "like_count": 1,
            "published_at": "2024-09-24T21:45:47Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Despite his denials, his writing sounds very ChatGPT-ish. That was my initial thought even before the video mentioned the reddit ChatGPT accusations.",
            "author": "@trucid2",
            "like_count": 0,
            "published_at": "2024-09-23T19:00:43Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"atrocious semantics\" -- I agree. As an old assembly language programmer, I find assembler easier to follow. (And more enjoyable.)",
            "author": "@donjindra",
            "like_count": 1,
            "published_at": "2024-09-23T13:14:55Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "\"The rust community isn't as nice and cool as they pretend to be\"\n\nWait.. They were pretending to be cool and nice this whole time? So they are even worse than they appear to be? 😦",
            "author": "@Jeremyak",
            "like_count": 0,
            "published_at": "2024-09-22T22:18:00Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "From TypeScript to Rust is a weird transition.",
            "author": "@b.7944",
            "like_count": 0,
            "published_at": "2024-09-21T21:09:13Z",
            "sentiment": "LABEL_1",
            "emotion": "disgust"
        },
        {
            "comment_text": "Most humans are not smart enough to build applications async. Languages lead us into pitfalls by how easy it is to use async and there is no recovery. You have to make sure all pieces are thread safe, all dependencies aligned, and you are able to do error handling in a way that is anti pattern to the rest of the language.",
            "author": "@squirrel1620",
            "like_count": 0,
            "published_at": "2024-09-21T02:29:52Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I understand Rust is simply over rated. Likely 50% of the people writing blogs about it have absolutely no experience building Rust applications. GoLang was my greatest experience with trying a new language for the first time. Everything just makes sense, analogous to python.",
            "author": "@squirrel1620",
            "like_count": 0,
            "published_at": "2024-09-21T02:25:18Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I don't hate it. I just don't NEED it. At least not in my world.",
            "author": "@FPChris",
            "like_count": 0,
            "published_at": "2024-09-20T02:56:58Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "8:16 its differentiable :D",
            "author": "@ManishVidyasagar",
            "like_count": 0,
            "published_at": "2024-09-19T22:51:28Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust people are great if you tell them you know a little bit of programming and what they think about rust.. grab some beer and you got yourself a lifetime friend that night\n\ngenerally rewriting what you wrote yourself always is a programmed failure anyway",
            "author": "@elalemanpaisa",
            "like_count": 0,
            "published_at": "2024-09-19T17:28:58Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "5:27 May cross async boundaries, the unnamed lifetime. This is arcana.",
            "author": "@tobuslieven",
            "like_count": 0,
            "published_at": "2024-09-16T23:35:07Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "17:33 You know... for some reason I struggling with errors too. Stack traces are extremely informative on production and async make it ever worse",
            "author": "@oliverfoxi",
            "like_count": 0,
            "published_at": "2024-09-16T11:35:40Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "8:36 I dunno, borrow checking and lifetimes were mostly easy for me",
            "author": "@oliverfoxi",
            "like_count": 0,
            "published_at": "2024-09-15T11:32:34Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "5:03 uh yes... Generics and macroses make lang too hard to comprehend. Especially if you dive deep into lib's code",
            "author": "@oliverfoxi",
            "like_count": 0,
            "published_at": "2024-09-15T11:27:59Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "maybe a link to those articles would be great",
            "author": "@Ndetonados",
            "like_count": 0,
            "published_at": "2024-09-15T01:34:55Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "When you use chat gpt to do anything serious, you soon realise that the AI apocalypse is really far away.",
            "author": "@mignik01",
            "like_count": 1,
            "published_at": "2024-09-14T23:56:15Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "friends don't let friends overdose on syntactic sugar around async.  just rawdog epoll bro.  explicit > implicit every time.  You'll understand where those microseconds are going rather then mysterious hiccoughs that break everything.  Throwing a bunch of keywords / await / send boundary / future around and hoping it works is just nonsense.  The entire async paradigm is functionally broken from the get-go and no language has ever made it usable, just varying levels of garbage.   It's not useful for anything beyond toy servers that send 'hello world' and disconnect.  Just don't.",
            "author": "@danmerillat",
            "like_count": 0,
            "published_at": "2024-09-14T22:21:52Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": ">6 min article read\n>39 minute video\nbros a really slow reader",
            "author": "@LabiaLicker",
            "like_count": 0,
            "published_at": "2024-09-14T15:06:00Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "It’s always hilarious to me watching Rust haters pretend like there’s zero rust code in production, meanwhile every single tech company uses Rust on their backend and Cloudflare’s entire platform runs on it. Hundreds of millions of dollars run on the language, in production. And those are just the companies that tell us they’re using Rust, who knows about other places.",
            "author": "@Daktyl198",
            "like_count": 1,
            "published_at": "2024-09-13T09:12:11Z",
            "sentiment": "LABEL_0",
            "emotion": "joy"
        },
        {
            "comment_text": "You should include the D programming language aswell when mentioning systems programming languages.",
            "author": "@per.nordlow",
            "like_count": 0,
            "published_at": "2024-09-12T17:48:28Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I prefer to suggest instead of learning rust learn right secure programming at c++ and use valgrind :D",
            "author": "@taylan5376",
            "like_count": 0,
            "published_at": "2024-09-11T23:53:06Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Why the hell he need async with high frequency trading.\n\nAsync is not about latency, it's about throughput!",
            "author": "@winnie8614",
            "like_count": 0,
            "published_at": "2024-09-11T23:23:39Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "8===D",
            "author": "@ControversialOpinion",
            "like_count": 0,
            "published_at": "2024-09-11T20:10:40Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Take a drink every time he says \"right?\"",
            "author": "@mackler",
            "like_count": 0,
            "published_at": "2024-09-09T23:08:15Z",
            "sentiment": "LABEL_1",
            "emotion": "disgust"
        },
        {
            "comment_text": "White William Brown Michael Robinson Elizabeth",
            "author": "@CarmenEric-o3b",
            "like_count": 0,
            "published_at": "2024-09-09T11:28:18Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Roc Language, right?",
            "author": "@gxtoast2221",
            "like_count": 0,
            "published_at": "2024-09-09T08:44:32Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "You are a newb if you don't handle errors.",
            "author": "@mcscubin8935",
            "like_count": 0,
            "published_at": "2024-09-09T02:38:08Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Any time I hear someone talk about deduplication and not decoupling that tells me they are a noooooob.",
            "author": "@mcscubin8935",
            "like_count": 0,
            "published_at": "2024-09-09T02:30:58Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "\"I'm not an idiot\"\n\nproceeds to write horrible Rust code with a clear lack of understanding...\n\nthis isn't TS, you can't just use an LLM or randomly stack-overflow a solution; you actually have to know what the language is doing before you can write it",
            "author": "@FirstnameLastname-qz9fr",
            "like_count": 0,
            "published_at": "2024-09-07T23:22:02Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "TLDR: Rust is hard af, therefore, it is bad",
            "author": "@joaom.bezerra1915",
            "like_count": 0,
            "published_at": "2024-09-07T18:59:18Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Anderson Brian Hall Gary Perez Sarah",
            "author": "@DierserMaxwell-e4x",
            "like_count": 0,
            "published_at": "2024-09-07T10:23:09Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "why would anyone watch this? some guy reading some other guy's article? \"skill issue skill issue skill issue skill issue\". riveting",
            "author": "@AcceleratingUniverse",
            "like_count": 0,
            "published_at": "2024-09-06T21:10:31Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "I sometimes say, \"No one likes a DRY KISS\" - DRY can be the enemy of KISS - more often than not with jr and mid developers, they are over abstracting, when they don't need to, and it just leads to complication.",
            "author": "@KevinNewman-qn7gc",
            "like_count": 0,
            "published_at": "2024-09-06T17:29:12Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Did he just put javascript and python below the pyramid",
            "author": "@ismaelswaleh8767",
            "like_count": 0,
            "published_at": "2024-09-06T16:48:56Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Thanks!",
            "author": "@gabirican4813",
            "like_count": 0,
            "published_at": "2024-09-05T22:40:43Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "I don't like stuffing ARC in the same box as GC having never had an RC stall yet I've had plenty of GC stalls. GC languages (like C#) can be significantly faster than systems languges due to allocations: they can just bump the stack pointer.. no need for malloc and sys_brk system call context switch. to get similar performance in C++ you've got to use a custom allocator like jemalloc",
            "author": "@mmelt",
            "like_count": 0,
            "published_at": "2024-09-05T20:14:13Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "C is faster than Rust, Lunduke did a whole video on it.",
            "author": "@robotron1236",
            "like_count": 0,
            "published_at": "2024-09-05T16:28:17Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "so is this guy and the audience all rustoid tr00ns then?",
            "author": "@N30NCVLT",
            "like_count": 0,
            "published_at": "2024-09-05T06:31:14Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Medium - the shittiest site that also asks you to pay them to read the shit that's posted there... That's all we need to know.",
            "author": "@ml_serenity",
            "like_count": 2,
            "published_at": "2024-09-04T19:39:03Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Algorithmic trading in typescript? He must have lost a fortune :)",
            "author": "@StCreed",
            "like_count": 0,
            "published_at": "2024-09-04T18:42:43Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "don't use async in Rust. Use threads.",
            "author": "@kristofkiekens902",
            "like_count": 0,
            "published_at": "2024-09-04T15:10:50Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Everybody complaining on Rust or any other language like .Net. Nobody asks you to use everything in the language.",
            "author": "@kristofkiekens902",
            "like_count": 0,
            "published_at": "2024-09-04T15:08:09Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Rust discords are an incredible resource and I have never experienced the pain points you’re mentioning.",
            "author": "@maboesanman",
            "like_count": 0,
            "published_at": "2024-09-04T03:59:38Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "C++ is exactly what I like, and like the man says, unique pointers and such give us noobs the guard rails we need to write fast code and not be bogged down by memory management hell",
            "author": "@AMildCaseOfCovid",
            "like_count": 2,
            "published_at": "2024-09-03T18:58:10Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "well in conclusion we can say Rust sucks",
            "author": "@egm5081",
            "like_count": 0,
            "published_at": "2024-09-03T01:35:02Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Rust is glowie language.",
            "author": "@nokomoko8832",
            "like_count": 0,
            "published_at": "2024-08-30T06:03:23Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "idk this feels like a mid take tbh, i really like the error handling in rust, it feels very granular that i can handle or propagate as needed, i think the author just needs to spend a day or two, make their own error type and its associated impls and play around with it in a sandbox",
            "author": "@_stix",
            "like_count": 1,
            "published_at": "2024-08-29T23:16:39Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I want tonlearn to code. I think i want to learn in c and then c++. Where is the guide the mentor the book for dummies. I like this channel but im learning nothing other than comparisons and idk where to start when everyone is just talking about what they code with but nothing about the concepts of coding.. I probably just answered my own question, but i would still appreciate the advice. I like graphics.m and Games. Maybe i could make one some day but i have to learn the concepts of coding (the hardest and possible leadt fun part) first. if i am going to be successful going in blind.  But i problem solve and hit my head against tables just go get a dumb mod to work, all the time. so i think its my type of thing who knows. Lmk if you have any pointers. Possible pun right there if i understand correctly. Anywaayyyy. Im gonna go listen to more coding gibberish until it starts to make sense.",
            "author": "@heiselblock",
            "like_count": 0,
            "published_at": "2024-08-29T11:15:56Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "C# is by far the best language, java has so many bugs and you can do everything with C# anything else is for clowns *except low level chip programming , assembler... ok sure go for it 😂",
            "author": "@1ForTheShieldz",
            "like_count": 0,
            "published_at": "2024-08-27T18:27:33Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "....should have stayed with VIsual R++, electric boogaloo edition",
            "author": "@mohammadhalipoto",
            "like_count": 0,
            "published_at": "2024-08-27T14:13:13Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "same thoughts Bro :)",
            "author": "@legenuspl4906",
            "like_count": 0,
            "published_at": "2024-08-27T10:47:27Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Maybe this is off topic but there's a lot of things you cant say on YouTube without your comment automatically being removed.",
            "author": "@That_Awesome_Guy1",
            "like_count": 0,
            "published_at": "2024-08-26T13:57:58Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Try swift. It has all the error handling you are looking for, wanna use optional? okay. Wanna use error == nil okay...",
            "author": "@abdullah_all_abir",
            "like_count": 0,
            "published_at": "2024-08-25T05:49:26Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "DRY => Do Repeat yourself! \nDNRY => Do Not Repeat Yourself == Don't Repeat Yourself\nDon't is short hand for Do not and thus already shortened. If you abbreviate it use DN",
            "author": "@_aullik",
            "like_count": 0,
            "published_at": "2024-08-24T12:13:46Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Stil writing in C. My apps are safe because of valgrind and my fellow colleague tester who's a genius in breaking any code with his tests. Especially, testing in limited resources with high pressure.\nAnd writing any new kernel module or driver I don't care if someone writing in Rust crying how nice and shiney his Rust code is. Who cares. My shit works in ATMs and CC terminals. Thus, it ain't that bad as Rusters used to claim diminishing C across forums and chats",
            "author": "@olyachepizdrik8683",
            "like_count": 0,
            "published_at": "2024-08-23T21:54:02Z",
            "sentiment": "LABEL_2",
            "emotion": "disgust"
        },
        {
            "comment_text": "Why Americans always talk loud and go on a rant? It's very exhausting to listen to ...",
            "author": "@JeroenDeMaeijer",
            "like_count": 0,
            "published_at": "2024-08-23T17:20:10Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "everything should just be c# with optional pinning and non-gc variables. its a shame AI chose python not c#. life would be beautiful.",
            "author": "@lukeno4143",
            "like_count": 0,
            "published_at": "2024-08-23T11:00:18Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "I am curious about the short mentioned at 35:00 or so, but it seems it has been deleted or the thumbnail and title changed becuase it doesn't appear on this channel.",
            "author": "@guard13007",
            "like_count": 1,
            "published_at": "2024-08-23T10:15:33Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "The author of this article would look far more knowledgable if they didn't stoop to responding to hateful and simplistic comments.\n\nFor example, replying to this comment would make anyone look stupid.",
            "author": "@guard13007",
            "like_count": 0,
            "published_at": "2024-08-23T10:08:28Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I learned nothing from this video. :/",
            "author": "@mctrafik",
            "like_count": 0,
            "published_at": "2024-08-23T06:30:22Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "He says it becomes very hard.  I hear a challenge to go there.",
            "author": "@digiryde",
            "like_count": 0,
            "published_at": "2024-08-22T13:13:19Z",
            "sentiment": "LABEL_1",
            "emotion": "fear"
        },
        {
            "comment_text": "Use Go, as easy and liberal as PHP, but faster.. ^_^",
            "author": "@AkhyarMaulanaPangeranWeb",
            "like_count": 0,
            "published_at": "2024-08-22T03:24:20Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I’m not a fan of rust though, this article is about a managed language guy shocked by rust is unmanaged language.",
            "author": "@jhk578",
            "like_count": 0,
            "published_at": "2024-08-20T15:37:55Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "I don't believe manual RC has any performance impact, its just that any ref--; has a chance that it will also destroy the object",
            "author": "@kreuner11",
            "like_count": 0,
            "published_at": "2024-08-20T14:56:52Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "The guy says he hates the syntax, and goes out of his way to write the most verbose syntax possible. Just use newtypes and imports instead of fully qualified functions.",
            "author": "@lucianafruin1667",
            "like_count": 0,
            "published_at": "2024-08-19T22:47:27Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "THANK YOU! These were the 2 main takeaways from this for me: I was always skeptical of RUST, but now I won't even begin to bother with it. \n1. Reduced development speed: writing code in Rust significantly slowed down development process compared to other languages.\n2. Overestimation of benefits: the promised advantages of Rust (such as performance) didn't outweigh the difficulties encountered in development.\nAnd believe it or not: My fave language for web databases: Visual Foxpro + West Wind Web Connection. Incredibly fast in data processing, and never ever any memory leaking problems.",
            "author": "@hstrinzel",
            "like_count": 1,
            "published_at": "2024-08-19T15:02:55Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "> code duplication \nI don't know what you are talking about, I manually unroll loops.",
            "author": "@satibel",
            "like_count": 0,
            "published_at": "2024-08-19T12:30:36Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "Rust = overhyped pain",
            "author": "@Freddy78909",
            "like_count": 2,
            "published_at": "2024-08-19T07:50:17Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "...and I always knew the Rust hype was just that....\"hype\".   I remember having a conversation with some Java developer years ago running his mouth about how \"Rust just makes sense\"  with respect to the syntax (because the syntax of other languages don't ?),  and how he wanted to write a game in it.....but had absolutely no idea of what I was talking about when I asked him what he thought of Rust's borrow checker and ownership rules.   Basically, as far too many things in the Software Dev community....it's about \"the feelz\" and what some other goofball told you, or people simply just making things up as opposed to having objective technical reasons behind their position or arguments .",
            "author": "@thecollector6746",
            "like_count": 1,
            "published_at": "2024-08-18T16:09:28Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Bullshit.  All things being equal  , nothing but assembly is faster than C/C++.   It all pretty much comes down to not only the, runtime  but what the runtime has inserted into your object executable that determines performance, and C/C++ out of all the languages mentioned here have the most minimal runtimes and runtime logic injections.",
            "author": "@thecollector6746",
            "like_count": 2,
            "published_at": "2024-08-18T16:05:31Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "It's Tokio, which is crap. Whenever I make that comment (e.g. on Stack Overflow), I get down votes at best or my comment deleted. Its the \"I want to be your main loop\" syndrome, Tokio shares with other crap like UI libraries, such as Vulkan or OpenGL. (SDL3Main, really?!) :)\nOnce you want a little async in some local corner of your code, Tokio spreads faster than a Virus at a Rock concert...",
            "author": "@ruffianeo3418",
            "like_count": 0,
            "published_at": "2024-08-18T08:16:22Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I love C++. It has been my language of choice for 30 years. I've taken a look at rust because the fans tell us C++ developers how bad and how \"dangerous\" C++ is. So I took a look and thought it looked like crap. The syntax omg. Why? Oh, and Java is shitty. I prefer to build native apps. None of this JVM or .NET nonsense.",
            "author": "@toby9999",
            "like_count": 2,
            "published_at": "2024-08-18T00:22:47Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "erlang's biggest strength is that it never crashes, which is also its biggest weakness, because now we have more software doing things in the world",
            "author": "@eeriedescent3996",
            "like_count": 1,
            "published_at": "2024-08-17T23:49:22Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "all of you rust haters may your JS shit rust in peace",
            "author": "@LeonPlis",
            "like_count": 0,
            "published_at": "2024-08-17T18:15:10Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust did a lot of things right (the enum system is absolutely fantastic), but if went absolutely ham on the performance, which is great if you need it, but let's be honest, most applications don't care if they run 10% slower. I just wish there was a language with the good features of Rust but garbage-collected, so you don't end up with insane lifetime annotations, and single threaded, with all IO being done with async (kind of like JS is).",
            "author": "@kajacx",
            "like_count": 0,
            "published_at": "2024-08-16T19:23:20Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I have an openion of this topic about rust or not rust. if you are a developer or freelancer, you need something faster and easier to produce as many projects as you can without thinking about how much RAM this code or project will take, stability, electricity, cpus ...etc so, rust will not add a value to you since you do not own the code or bear the cost of operation . if you are company owner who owns project or data center, you will think on how much RAM the code needs and how much electricity, cooling, RAM ...etc and also the downtime due to the bugs will cost you ...etc. Rust will add a value to you. Rust will reduce electricty bill up to 70%, does not it worth trying or using it? do you know how much money will you save. when you save this much money, you will not care about the complixity where developers job is to resolve the complixity. \nwhat is your openion?",
            "author": "@maherkhalil007",
            "like_count": 0,
            "published_at": "2024-08-15T09:16:52Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "D is also a very nice community. We just like to solve problem",
            "author": "@carstenrasmussen1159",
            "like_count": 0,
            "published_at": "2024-08-14T18:39:14Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "He really should consider OCaml - in new versions you can avoid GC on certain hot paths using “local”",
            "author": "@eileennoonan771",
            "like_count": 0,
            "published_at": "2024-08-14T14:17:52Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I had a bad time with async in python… i’g glad I’m not using async in rust yet…",
            "author": "@rainonwires",
            "like_count": 0,
            "published_at": "2024-08-14T13:41:30Z",
            "sentiment": "LABEL_1",
            "emotion": "joy"
        },
        {
            "comment_text": "Where can I see the Tiger Beetle explanation of asserts?",
            "author": "@thischannel1071",
            "like_count": 0,
            "published_at": "2024-08-14T13:12:20Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "The author has some valid perspectives but comes across like a smug pos.",
            "author": "@IronicHavoc",
            "like_count": 0,
            "published_at": "2024-08-14T06:57:30Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "well.. atleast it dont have garbage collector...",
            "author": "@uraymeiviar",
            "like_count": 0,
            "published_at": "2024-08-14T01:32:52Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Looked at it, looked again, im sticking with c.",
            "author": "@DeadCat-42",
            "like_count": 1,
            "published_at": "2024-08-13T18:08:31Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "at work for rust errors we go like:\n\nsome_error.annotate(\"doing blah\").track().log()?;\n\nannotate converts other errors into the crate type, and builds an `error_stack` to make it easy to find stuff later.",
            "author": "@MatthewSherborne",
            "like_count": 0,
            "published_at": "2024-08-10T20:56:18Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Async did take a while to click, I literally had to do a workshop that implement's all this manually for me to get it, one thing that helped was when async was described as \"a tree of tasks\" and this made sense. \n\nSince if you look at it from a top down perspective (with the root at the top, with the root task being created transparently by `#[tokio::main]`) tasks at a given layer happen concurrently at the same time and if the runtime allows it (so long as you create the tasks in the correct way) in parallel, tasks above (or before) the given layer are waiting for the tasks at the current layer to finish and the tasks at a the current layer are waiting for the tasks below (or after) to finish.\n\nAs for errors, `?` > invisible control flow every time, I tend to create an `Error` enum for every module then just return a specific variant where appropriate then either deal with the error in the caller of said function OR have an `Error` enum in the caller's module that implement's `From` (thiserror's #[from] makes this sort of thing trivial for the most part) and just call `.into()`; at some point you do have to deal with it though, in my web API server app I have three layer's that deal with errors, when I'm setting the server up, when I'm trying to start the server and during the server's runtime (these errors are usually returned as a request response). Point is you end up with a hierarchy of `enum Error` which can usually point to where the error is since every point of failure has it's own variant + message details.\n\n\nAlso manually returning a future or a function that accepts a future are both difficult (and worse can be painful) won't disagree there.",
            "author": "@rpgjaguar",
            "like_count": 0,
            "published_at": "2024-08-09T08:59:46Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "This is so true... I came from weakly typed languages and getting used to duplication in strongly typed languages. It's so hard at first.",
            "author": "@noeldacosta7621",
            "like_count": 2,
            "published_at": "2024-08-08T20:22:47Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "I’d love to know what your thoughts are on Swift as a language compared to Rust and Go",
            "author": "@pixelfingers",
            "like_count": 0,
            "published_at": "2024-08-07T23:33:43Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "No one does algorithmic trading in typescript. Sounds like a script kiddie who got his soul broken by the borrow checker. With that said, once you realize that it is impossible to write a program without mutating state, you might as well throw the whole goddamn language in the shitter. The example code is what happens when the ethereal fairy dust world of the lambda calculus meets the reality of the data mutation in a real program that actually has to do something. Immutable data is useless.",
            "author": "@hvrjstn",
            "like_count": 0,
            "published_at": "2024-08-07T22:31:42Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Svelte much better.",
            "author": "@peterjohansson739",
            "like_count": 0,
            "published_at": "2024-08-07T18:39:47Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I mean if performance is really your only concern, go assembly or go home I guess.",
            "author": "@RainingArtillery",
            "like_count": 0,
            "published_at": "2024-08-06T11:45:01Z",
            "sentiment": "LABEL_1",
            "emotion": "fear"
        },
        {
            "comment_text": "JS > Snek > PHP, Ruby, Lua, etc.  All dead languages, I know.",
            "author": "@daniellewis984",
            "like_count": 0,
            "published_at": "2024-08-05T22:30:27Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust is a fad!",
            "author": "@roberthoople",
            "like_count": 1,
            "published_at": "2024-08-05T02:04:01Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "And what is with the Rust \"community\" bashing?  I have been asking silly questions on the Rust user form for years and everyone has been patient, helpful  and useful. Just as much so as any other tech forum I hang out on.",
            "author": "@Heater-v1.0.0",
            "like_count": 0,
            "published_at": "2024-08-03T11:17:23Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I don't get it. I have written a lot of Rust over four years. Using both sync threads and async tasks. Pretty much all my Rust reads as clearly as Javascript, Typescript or whatever. If I ever feel the need to start writing lifetime tick marks or other complexities I take that as hint I'm going down the wrong road. I don't have Arc all over the place, never used Pin. Occasionally a .clone(). Sure I may be missing out on ultimate performance but everything runs like shit off a shovel compared to JS etc anyway. So I get an extra does of that correctness that Typescript tries to bolt onto JS and much faster code. \n\nHint: When I discuss Rust solution in Rust on the Rust user forum I am often told mu Rust is not \"idiomatic\" and a dozen people will offer two dozen \"rusty\" solutions. Typically I find their suggestions to be way over complicated, harder to understand, introducing all kind of Rust features that while brilliant and useful are not required for what I want to do. And typically the solutions are slower than what I started with. So be careful what Rust advice you listen to. As for \"idiomatic\", meh, what is that anyway? With all the checking Rust does I consider anything that compiles and gets through the linter (clippy) is \"idiomatic\" enough.",
            "author": "@Heater-v1.0.0",
            "like_count": 0,
            "published_at": "2024-08-03T10:58:51Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "It's such a stupid post. Like he's showing us the async rust version of the code and says \"look how terrible this is\" and then uses a non-async Go implementation to compare it to... Like dude, you can write sync code in Rust too, it's not difficult. And if you're fine not using async, then why are you using async in Rust? It just doesn't make any sense.",
            "author": "@Luxalpa",
            "like_count": 0,
            "published_at": "2024-08-03T10:00:10Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "some people want to ship products and not be stuck in programming hell for eternity.",
            "author": "@basedretard-go8ti",
            "like_count": 1,
            "published_at": "2024-08-02T20:59:13Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "still, MongoDB sucks. so, I choose right community",
            "author": "@sighupcmd",
            "like_count": 0,
            "published_at": "2024-08-01T22:14:26Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "The general concepts are not the main problem of Rust, but it's the horrible syntax. That has nothing to do with skill, but with being sigma with your own time spending. If you're like a lot of people and need to know what you're actually doing, it's too much to get into for what gain? To be able to code according to a lot of rules because everyone pretends it's cool? Nah bro. I rather zig it",
            "author": "@NorthEagle",
            "like_count": 0,
            "published_at": "2024-08-01T21:22:02Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I do agree that Rust has the most cult-like community that I have ever seen for a programming language.",
            "author": "@dexternepo",
            "like_count": 1,
            "published_at": "2024-08-01T18:17:52Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "what i found with rust helper functions, is that i can just write them in a macro, then i dont need to think about all the weird trait generics and can just copy out what i wrote",
            "author": "@ukaszzajac6704",
            "like_count": 0,
            "published_at": "2024-08-01T15:58:59Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I'm new to Rust but have many years of experience on C and several functional langauges. Any good advice for Rust learning material besides the official book and the mentionad book on async? Thanks!",
            "author": "@januszkszczotek8587",
            "like_count": 0,
            "published_at": "2024-08-01T06:11:46Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "well, I told you Nim is the perfect language. you just wouldn't listen ;-)",
            "author": "@kobi2187",
            "like_count": 0,
            "published_at": "2024-08-01T03:18:48Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "It’s NOT a skill issue",
            "author": "@Niccion",
            "like_count": 0,
            "published_at": "2024-07-30T21:55:53Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Argument about errors is weird. Just stop using f*cking anyhow",
            "author": "@МаксимМакаров-к8б",
            "like_count": 0,
            "published_at": "2024-07-30T11:08:01Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Fun fact. Most programmers whinnying about another programming language, also suck at their own preferred programming language",
            "author": "@nicky5185",
            "like_count": 1,
            "published_at": "2024-07-29T17:20:23Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "There is a point to the lack of null pointer crashes and suck. Sometimes, crashes are great: you get an error very soon, with a nice stack trace. Sending the error elsewhere (which is what most people will do when handling one) may mean anything from having a useless stack trace to broken program behavior in subtle ways.",
            "author": "@darak2",
            "like_count": 1,
            "published_at": "2024-07-29T11:26:05Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "After a few years of using rust professionally now, I'd say if you're still fighting with the compiler or the language, you're doing it wrong. Often times that happens when you try to directly port code or architecture from another language. In the end, you can get beautiful, performant, elegant rust, but only if old paradigms are abandoned.",
            "author": "@dennisestenson7820",
            "like_count": 2,
            "published_at": "2024-07-29T04:52:58Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I've never used ChatGPT.",
            "author": "@NimerionTech",
            "like_count": 0,
            "published_at": "2024-07-28T21:26:18Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "If a design needs someone else to hand hold you through it that design is typically bad. Rust is good for what it is but it's design isn't one of the good things about it. The design is plainly bad. Yes skill issues on the developer perspective but why don't we talk of skill issues on the language design perspective??",
            "author": "@l.a.z.e.i7924",
            "like_count": 0,
            "published_at": "2024-07-28T20:54:33Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Yes, Rust community *IS* cult like...  like anything I've seen before in programming languages. And annoying too.  In order to prop their language, they can't restraint the urge to dunk on everything else.\nRust fanboys, maybe, just maybe, if you beloved language is horrible at handling \"awful\" databases like MongoDB, it is because your language... sucks? Just maybe.",
            "author": "@ppapdddar6159",
            "like_count": 1,
            "published_at": "2024-07-28T00:03:35Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "Who DOESN'T code async? It's essential for so many problem spaces.",
            "author": "@dguy321",
            "like_count": 0,
            "published_at": "2024-07-27T18:59:09Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Why is he always selecting text from the second letter to the second to last? Is it a meme?",
            "author": "@artembaguinski9946",
            "like_count": 0,
            "published_at": "2024-07-27T15:34:54Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I love Rust, but I think I would love a garbage collected version of Rust even more. Give me enums (especially Option), traits, and functional features that aren't an afterthought like they seem to be in so many languages, but skip the borrow checker. Then make it as compatible as possible with Rust so that I can do managed memory when I feel like I need it.",
            "author": "@EthanBradley1231",
            "like_count": 0,
            "published_at": "2024-07-27T14:05:54Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "The article said it straight..  *Anybody that said Rust doesn't have atrocious syntax is lying to your face* .. Hence i never subs to this channel. Rust is for cult follower that doesn't bother to do their own research.. there is tons of good language out there. Odin is far miles better than Rust.. people are so lazy to do any research. Rust is for cult also known as javascript for low level programming",
            "author": "@_slier",
            "like_count": 1,
            "published_at": "2024-07-25T14:11:18Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Great post. \nThe async stuff at the start reminded me of issues I constantly have with FP-TS on TypeScript. I guess functional programming just gets harder as you push it to do more.",
            "author": "@DamienSawyer",
            "like_count": 0,
            "published_at": "2024-07-25T00:37:48Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I forgot that Prime does react vids and thought this was his opinion",
            "author": "@domuuuuu",
            "like_count": 0,
            "published_at": "2024-07-24T23:38:11Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "Does he only commenting stuff or is he actually building sometimes something?",
            "author": "@Neunzahn",
            "like_count": 0,
            "published_at": "2024-07-24T19:47:45Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Eh.....I like to use rust for some stuff....but damn it really can suck hard.\n\nIf you want to deal with dependency hell, horrible ergonomics in unsafe blocks, and absolutely depressing compile times, rust is for you.\n\nAll that said I'm still going to keep using it for some stuff. But still can't recommend it for safety critical systems without a cert-ed compiler and solid standard.\n\nand yes I know there are attempts in the works to get a certed compiler.",
            "author": "@lenzokun",
            "like_count": 0,
            "published_at": "2024-07-24T15:50:35Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "It's funny to watch you guys struggle with problems in trendy languages that Java solved 25 years ago.",
            "author": "@billchatfield3064",
            "like_count": 0,
            "published_at": "2024-07-24T03:23:16Z",
            "sentiment": "LABEL_1",
            "emotion": "joy"
        },
        {
            "comment_text": "Ok \"skill issue\" isn't actually a counter-argument to \"I have issues with how difficult it is to learn how to use this tool properly, and as a result I do not recommend this tool.\"",
            "author": "@XxThunderflamexX",
            "like_count": 7,
            "published_at": "2024-07-23T12:53:25Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I hate programmers, they never evolve. Money is what matters, then performance, then whatever nerd shit 😂 they're caught up with.",
            "author": "@TerrenceLP",
            "like_count": 0,
            "published_at": "2024-07-23T08:07:17Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "I currently own theprimeagenis.gay 😂",
            "author": "@GoldmediaSubscribeme",
            "like_count": 0,
            "published_at": "2024-07-23T04:10:50Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "The Rust community turned me away from the language before the language ever did.",
            "author": "@rhone733",
            "like_count": 0,
            "published_at": "2024-07-22T22:19:14Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Rust is designed by people who played Pokemon as children. Monsters everywhere...",
            "author": "",
            "like_count": 0,
            "published_at": "2024-07-22T15:01:30Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I had a short look at Rust and noped out immediately. If I want something that looks like C++, I'd use C++. The speed argument is dumb, study after study finds that GC'd languages are _theoretically_ a little faster, but in practice is either doesn't matter (GC performance has come a long way), or people are making non-optimal memory management choices, which make the GC-less language actually slower. There are so many good languages to chose from. I know and love Kotlin and Scala, but I heard good things e.g. about Julia and Elixir, and Swift seems decent too. Don't buy the hype, use the language that fits you and your problem at hand.",
            "author": "@HerbertLandei",
            "like_count": 1,
            "published_at": "2024-07-22T10:45:11Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I'd like a feature in rust where you can get a backtrace for where an `Err` value was created.",
            "author": "@cheako91155",
            "like_count": 0,
            "published_at": "2024-07-22T07:00:48Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Async feels like a cruel joke on the world.",
            "author": "@BDKR",
            "like_count": 0,
            "published_at": "2024-07-20T19:05:56Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I spent 4 years watching The Rust Cult. I'm filled with disgust.",
            "author": "@andrewphi4958",
            "like_count": 0,
            "published_at": "2024-07-19T14:54:20Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "When will these  rust plebs learn. If you can't control your own pointers, you can't control your own destiny.",
            "author": "@xavier32421",
            "like_count": 0,
            "published_at": "2024-07-19T01:17:34Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Honestly everyone is shitting on TS. But when you pair it up with deno it is one of the few languages that gets shit done, but it will not earn you any bragging rights.",
            "author": "@Bomberuscool",
            "like_count": 0,
            "published_at": "2024-07-18T23:45:33Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "MGCGA!\nMake Garbage Collection Great Again!",
            "author": "@toxiccan175",
            "like_count": 0,
            "published_at": "2024-07-18T21:47:42Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "What confuses me about this article is that after learning that \"Rust is awesome\" is too simple, he jumps straight to \"Go is awesome\". It feels like he's just going to keep jumping from one trend to the next without actually stepping back to think about the best tool for the job.\n\nIn this case I think Elixir may be an even better choice than Go. Preemptive multitasking is huge. Runtime REPL, introspection tools, and built-in clustering are also big wins for anything that needs to be low-latency, high-uptime, and maintainable.",
            "author": "@pdgiddie",
            "like_count": 0,
            "published_at": "2024-07-18T10:37:55Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "With Fable, you can transpile f# to rust. So, if he likes ocaml, try f# and transpile it to rust for the performance. Btw the f# comunity is the best!",
            "author": "@RealDieselMeister",
            "like_count": 0,
            "published_at": "2024-07-17T15:54:06Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Dude would love C++. If you don't listen to the gurus then it's a pretty inclusive language that allows you to code however the hell you want and if a newer version changes the behavior of your code (rare but it happens) then just set the compiler flag to use an older standard. Or just use C. That works too. You can even provide your own replacement standard library or your own replacement application startup code (the hidden code that runs before main)",
            "author": "@jean-michelgilbert8136",
            "like_count": 0,
            "published_at": "2024-07-17T03:52:27Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I feel like Rust forces a lot of things that are a bit unnecessary. Like I get it, the whole goal is to be safe, but it gets so hard that at some point people just go unsafe or give up the language entirely.",
            "author": "@peq42_",
            "like_count": 0,
            "published_at": "2024-07-17T01:09:36Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I feel like a lot of problems when getting a handle on a new programming language or library or framework or whatever is they tell me all these wonderful features. They just don't tell me how to best use them, if they tell me how to use them at all.",
            "author": "@ChannelSho",
            "like_count": 0,
            "published_at": "2024-07-16T18:07:39Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "you're quite cool",
            "author": "@mrnobody1321",
            "like_count": 0,
            "published_at": "2024-07-16T16:01:26Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "> > Send to a nil chan blocks\n\n> Can we all agree that this is bad\n\nNo. It's useful with select",
            "author": "@alurma",
            "like_count": 0,
            "published_at": "2024-07-16T08:55:04Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "« To master C++, is like mastering Rust » I have never read anything close to such a high level of self-confidence about C++. I wonder whether he’s ever written a move constructor in C++, or even actually moved some data to realize since C++ does not have an affine type system, you can still read and write to the (now uninitialized) memory of the previous object. That kind of hot takes :D",
            "author": "@DimitriSabadie",
            "like_count": 2,
            "published_at": "2024-07-15T23:54:25Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "6:20 as someone who has taken full systems programming courses for C, and spent maybe 10-20 hours seriously even trying to learn Rust (though admittedly quite a bit more time passively absorbing info through channels like tantan that simply like Rust and use it) that is *_far_* easier for me to comprehend, at least vaguely, than even moderately high level C. I mean christ even simple gnu tools like \"cat\" are written in some language that was clearly first spoken by Cthulu. You can tell me it's written in C, you're a liar, that's New Modern Eldritch. (a derivative of Old Modern Eldritch that began to seriously break off around 1085BC) \n\nThis isn't me trying to just shit on C to shit on C, I do genuinely quite like C for a lot of things (for instance, just recently I was trying to get flashpoint to use Ruffle on linux and couldn't figure out why it wasn't working, so I trivially wrote a simple C program that would write out all of it's arguments to a text file. Turns out the issue is that flashpoint calls it's executables without quotes, so any url that has a space in it was seen as two arguments. One 3 line bash script later and it's fixed) but if this is at all even vaguely representative of \"advanced\" or \"hard\" Rust then I seriously need to double down on learning it because the fact that I have a vague understanding of what's happening is absurd.",
            "author": "@robonator2945",
            "like_count": 0,
            "published_at": "2024-07-15T19:05:22Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I never used Rust in production but i still think rust can't be that bad. I mean some one wrote a OS with rust. With the little bit of experience i gathered, i would say it is less likely to fuck up using rust  than in c++. You just need to remember when you use unsafe you leave planet earth and you find your self in space the most dangerous teretory where every little fuck up could mean death. In C++ you need really good static code analysis to get something similar.",
            "author": "@lukasblenk3684",
            "like_count": 0,
            "published_at": "2024-07-14T20:41:38Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Pekka dislike this post",
            "author": "@daltonyon",
            "like_count": 0,
            "published_at": "2024-07-14T15:37:18Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I typically tell people who want to lear programming: start with something like C/C++, and not JavaScript. When they ask 'Why?' JavaScript will allow you to break all kinds of rules and reinforce bad habits. When i spend too long in JS land, i have to like...detox when i come back out 😂",
            "author": "@packrat-y7j",
            "like_count": 0,
            "published_at": "2024-07-14T12:00:50Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Finally, sign Rust made it! People are complaining about it.",
            "author": "@FathDaniel",
            "like_count": 0,
            "published_at": "2024-07-14T09:33:52Z",
            "sentiment": "LABEL_1",
            "emotion": "anger"
        },
        {
            "comment_text": "People could use rust zig or any contender to do good, but this guy chose to build yet another high performance trading crap to speed up the next big crisis. So glad he failed.",
            "author": "@arvetemecha",
            "like_count": 0,
            "published_at": "2024-07-14T07:26:49Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "I hope Go also have shadowing",
            "author": "@afterschool2594",
            "like_count": 0,
            "published_at": "2024-07-13T15:49:08Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\" ...the fastest programming language out there...\" - He wrote that he does not know enough about programming, algorythms and runtime staffs. There is no reason to read the rest of the article.",
            "author": "@haraldsimon2807",
            "like_count": 0,
            "published_at": "2024-07-13T10:39:53Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "You should try OCaml. I never thought I would like anything like it based on the description of it, but it's beautiful",
            "author": "@TatianaRacheva",
            "like_count": 0,
            "published_at": "2024-07-13T04:16:41Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "the go code look 10x worse than rust tho",
            "author": "@theLowestPointInMyLife",
            "like_count": 0,
            "published_at": "2024-07-12T18:07:02Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "The cope here is strong.",
            "author": "@smallbluemachine",
            "like_count": 0,
            "published_at": "2024-07-12T17:44:32Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "The PHP community's politeness is conditioned by synchronous execution and deceptive. They wait in line with smiles, but don't expect them to hold the door for a pregnant woman. If there are multiple lines entering they might be able to open the door, kill the process, move to another, and re-execute, but they won't do it unless the kernel tells them to",
            "author": "@dmccapes1",
            "like_count": 0,
            "published_at": "2024-07-12T10:02:12Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "1:50 : Rcs, Arcs and Mutex are things you should also be using in the other fast languages if you'd like to not hunt a bug day in day out somewhere down the line. It IS true that Rust might force you to use them when not necessary, because the compiler is not smart enough. But if you know those cases, then you can use unsafe, and wrap your solution in a safe api. If you don't know those cases, then you are better off with Rust, than with C,C++ or Zig. So it is a win-win for Rust anyways, Prime just loves hating on Rust.\n\ne..g. clone() is a convenience, and it is also very easily discoverable. You can iterate faster with it, and get rid of it, if it makes sense, later. The same way you can fall back into unsafe, later, on the aforementioned cases. Rust sets very clear boudnaries on these things.",
            "author": "@cloudsquall88",
            "like_count": 0,
            "published_at": "2024-07-12T08:50:10Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I am probably the last dev on planet earth who avoids asyc/await in every language (ok, except simple js in web pages). I just spin up threads and use blocking operations. SO MUCH SIMPLER to say e.g. \"do A; do B; do C\" than to say \"hand C to B, hand B to A, then start A\". Yes, in most languages threads are heavy; you wouldn't want to spin up ten thousand of them. But when do you really need to spin up more than a dozen or a hundred? Hardly ever. And fortunately, java virtual threads makes spinning up ten thousand threads no problemo. Java does not suffer from the problem of the language getting in the way when things get more complex. It suffers from the bad reputation it got from people putting themselves into design-pattern hell, but I find java's difficulties to be mostly at the beginning of the project, and not at the last 10%. That's nice.",
            "author": "@freeideas",
            "like_count": 0,
            "published_at": "2024-07-12T08:26:17Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "We need to make our own Rust. I mean it's not *that* bad. It just needs some syntax changes to make it look more traditional. Go back to int, unsigned int, long and so on instead of i32, in variable declaration switch the order of variable, type back to type, variable and so on. And and that alone would already make Rust a lot better.",
            "author": "@test-rj2vl",
            "like_count": 0,
            "published_at": "2024-07-12T08:18:13Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "No language is faster than machine language.",
            "author": "@ktaylor9095",
            "like_count": 0,
            "published_at": "2024-07-12T06:42:57Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rule n 1. I have used in IT since 1985 : if it ain't broken, don't fix it",
            "author": "@BoominGame",
            "like_count": 0,
            "published_at": "2024-07-12T06:27:04Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Medium is gay…literally",
            "author": "@44golfreak",
            "like_count": 1,
            "published_at": "2024-07-12T05:59:10Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "omg, talk about missing the mark w/ human-readability",
            "author": "@nikbl4k",
            "like_count": 0,
            "published_at": "2024-07-12T05:17:15Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "I disagree. Is much more time consuming learning by make mistakes than learning the right way from a guy commited that mistakes.\nHuman kind evolved because writing: storing past knowledge is the right way to avoid wasting time with known mistakes.",
            "author": "@AlexeiDimitri",
            "like_count": 0,
            "published_at": "2024-07-11T21:17:40Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "On paper rust seemed like shit, because Gods will never put the mentioning of GOTO FOR LOOP BREAKING SHIT IN THE ONE OF THE FIRST CHAPTERS OF THEIR BIBLE",
            "author": "@ИванЗакутний-м3ц",
            "like_count": 0,
            "published_at": "2024-07-11T20:51:59Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "If a programmer is using AWAIT/ASYNC in any asynchronous language or aspect of it, it`s using it WRONG.\nRust seens to suck but using a AWAIT/ASYNC code to exemplify it is the same as sayng shit about JS using AWAIT/ASYNC code. U are right, using the wrong reason.",
            "author": "@AlexeiDimitri",
            "like_count": 0,
            "published_at": "2024-07-11T20:49:21Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "21:15, nothing to do with the Rust community, it's the Reddit community.",
            "author": "@ldiamond3290",
            "like_count": 1,
            "published_at": "2024-07-11T19:21:22Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "you are going laracon, to the most toxic community in PHP.\nnice! :D",
            "author": "@unknown.profile.handle",
            "like_count": 0,
            "published_at": "2024-07-11T18:27:05Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "18:33 Zig shout out!",
            "author": "@familyshare3724",
            "like_count": 0,
            "published_at": "2024-07-11T16:03:19Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "didnt you blacklisted the medium logo already?",
            "author": "@nomadshiba",
            "like_count": 0,
            "published_at": "2024-07-11T01:14:48Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "Okay, regret further, doesn't impact that it's still one of the best out there ... Besides dude, try to talk a bit slooooower ... Listing to you feels like I'm listening to a ADHD person like myself ... damn xD",
            "author": "@vo9279",
            "like_count": 0,
            "published_at": "2024-07-10T18:12:37Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "ocaml is nice, i hate clojure",
            "author": "@zedquach",
            "like_count": 0,
            "published_at": "2024-07-10T14:47:21Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "The example’s Rust syntax looks very similar to C++. If I already know C++, is Rust easy to learn?",
            "author": "@mariusirgens5555",
            "like_count": 0,
            "published_at": "2024-07-10T08:09:00Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Idek how he could have written an algo trading platform in typescript to begin with…best lang for this is python imo…you only need C or rust for hft",
            "author": "@julienv7031",
            "like_count": 0,
            "published_at": "2024-07-10T07:24:16Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Idek how he could have written an algo trading platform in typescript to begin with…best lang for this is python imo…you only need C or rust for hft",
            "author": "@julienv7031",
            "like_count": 0,
            "published_at": "2024-07-10T07:22:21Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Usually what young and unexperienced developers (not engineers) do not understand is that every PL is a tool for solving particular problems, for example, you can't take a butcher knife and do a brain surgery (you can... but that will not be a sophisticated operation,  that will be massacre)\nHate to say it but Prime is still an \"infant\" in the programming lifecycle,  but what is really really bad is that he has this \"impact\" to wide population of young programmers which are steer towards very bad practices and principles,  they will understand at some point (as prime will also, probably much sooner then them) but wasting your precious years building wrong foundation is something that will be very.bad for each of them 😢  which is sad",
            "author": "@georgytioro",
            "like_count": 0,
            "published_at": "2024-07-10T06:11:05Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "its called compiler driven development - its fuken great. the more we describe up front the greater the opportunity for optimisation",
            "author": "@meyou118",
            "like_count": 0,
            "published_at": "2024-07-10T04:26:26Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "It all comes down to \"what problem am I trying to solve\" ... for 95% of developers, scaling up isn't a problem and CPU use is a minor expense on the bill so that isn't a problem, and the language they are using (JS, Python, C#, Java) works for them... so there is no problem that deserves using Rust. It doesn't make your life more simple, that's for damn sure ... Solutions need Problems.",
            "author": "@Tony-dp1rl",
            "like_count": 0,
            "published_at": "2024-07-10T04:12:38Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Shadowing is an antipattern in C, C++, Java, (probably C#) but a useful tool in Rust. Mind bent.",
            "author": "@rossbagley9015",
            "like_count": 0,
            "published_at": "2024-07-10T03:40:10Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust is very hard , and you know why ? Because after one year of hunting I still cant find rust text file parser than is faster the Perl MCE :) Looks like all Rust coder have 100% skill issue and that's why why Rust is slower than Perl still :)",
            "author": "@kutta1973",
            "like_count": 0,
            "published_at": "2024-07-09T19:25:55Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Those crazy types stink of either not using newtypes to abstract what you mean, or not using parametric types to handle the general case.",
            "author": "@mrpocock",
            "like_count": 0,
            "published_at": "2024-07-09T19:18:53Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Not haters shit on Greta. We are not the same.",
            "author": "@Warrigt",
            "like_count": 0,
            "published_at": "2024-07-09T18:27:45Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Did algorithmic trading for many years. What you want is easy data processing, and easy API integration -- full stop. So you want (a) to be able to crunch AND DEBUG (!!!!) reams of data fast, while (b) easily deploying against messy gross APIs.\n\nThe need for speed is a large myth. People who play the speed game have datacenters next to exchanges. Use mere mortals play a data game -- we crunch reams of original market and public data, looking for significant indicators over dozens of competing algorithms, all funnenled into dashboards, in a world where major strategies and anomalies are the weekly norm. \n\nTL:DR: Success in markets is determined by those who can wrangle the most data (D) over as many strategies (S), while gathering as many actionable isights via dashboards as possible (I). DxSxI is a state space that can be trillions of rows, impossible to compute, and the skill in dividing and conquering, managing this swarm, is what determines success.",
            "author": "@justingirard7476",
            "like_count": 0,
            "published_at": "2024-07-09T13:16:42Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust's not for everyone. The compiler is like that grumpy math teacher in school who slaps your hands by that ruler when you make a mistake and frequently tell you are a bad programmer, and to be good at it takes couple of years of such punishment - not everyone can pass that morally. 😂 Better to go to write shitcode on other more friendly language. Rust is for masochistic persons. 😂 (Sarcasm mode on)",
            "author": "@AndrewBednoff",
            "like_count": 0,
            "published_at": "2024-07-09T12:33:11Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "swift does concurrency so much better than rust (in terms of syntax).",
            "author": "@brentmifsud6181",
            "like_count": 0,
            "published_at": "2024-07-09T05:29:26Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust died too soon.",
            "author": "@tusharsnx",
            "like_count": 0,
            "published_at": "2024-07-09T04:36:05Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "Kotlin has sane Async types syntax with coroutines :)",
            "author": "@roxferesr",
            "like_count": 0,
            "published_at": "2024-07-09T00:42:12Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "That was a bad article written by some snowflake. Good video though",
            "author": "@vadimemelin2941",
            "like_count": 0,
            "published_at": "2024-07-08T23:33:23Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Reading the author's comments under the article is hilarious\n- Turns out he never reads docs\n- For all his insistence that he doesn't use AI to write articles... he just casually mentioned that he used it to generate the code in the article",
            "author": "@diskpoppy",
            "like_count": 0,
            "published_at": "2024-07-08T21:46:46Z",
            "sentiment": "LABEL_1",
            "emotion": "joy"
        },
        {
            "comment_text": "\"The name......\"\n\nI had to tab over to see what was wrong cuz I was listening in the background!",
            "author": "@DingleFlop",
            "like_count": 1,
            "published_at": "2024-07-08T20:22:42Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "Lmao the blogger is pissed. 😂 god language wars 😂 dfaq",
            "author": "@jonskislo1",
            "like_count": 0,
            "published_at": "2024-07-08T20:13:13Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "This is like saying \"helicopters are dumb. They're too complicated. Just drive a car.\"\n\nThese kinds of complaints have been happening for decades about C/C++, with people saying just use Java or C#, and when you say \"what about operating systems or games or embedded?\" they're like \"honestly, who writes *those* things?\"",
            "author": "@RickYorgason",
            "like_count": 0,
            "published_at": "2024-07-08T19:41:52Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Can someone please ask this guy to shut up? I am sick of his rants.",
            "author": "@ameykarekar",
            "like_count": 0,
            "published_at": "2024-07-08T18:22:19Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "whats wrong with typscript???",
            "author": "@KoljaMineralka",
            "like_count": 0,
            "published_at": "2024-07-08T16:47:29Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "Yellow square is about an order of magnitude faster than snake. That is sad true I had to accept as being parser tongue myself.",
            "author": "@Gerlige",
            "like_count": 0,
            "published_at": "2024-07-08T16:40:36Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "I use nim btw",
            "author": "@bilatungdulang9708",
            "like_count": 0,
            "published_at": "2024-07-08T13:30:11Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I'm ngl these kind of articles don't do anything to my perception of Rust. Most of the time it's skill issues, too little time in the saddle, or a different language-oriented mindset.",
            "author": "@thesaintseiya",
            "like_count": 0,
            "published_at": "2024-07-08T12:16:34Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "If you think you are already doing \"Don't repeat yourself\" just because you have good design pattern in your code base. No, you are not. You still need patching the code bug. Either for performance issue or security issue.\n\nRust eliminates them.",
            "author": "@wawan_ikhwan",
            "like_count": 0,
            "published_at": "2024-07-08T11:30:06Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "holy shit Prime! i didn't know you were doing some arb quant stuff!😮 please build something again in the future...",
            "author": "@theObserver33",
            "like_count": 0,
            "published_at": "2024-07-08T10:02:01Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "Serious question... how many programmer work on stuff so time-sensitive a optimized java code isn't good enough, they need an optimized rust code?\n\nAt the end of the year, how much time did you save by making all your programmer learn to async in rust VS use good ol' java?",
            "author": "@vincenthamel3420",
            "like_count": 0,
            "published_at": "2024-07-08T01:36:14Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "skill issue...",
            "author": "@0x2a1A4",
            "like_count": 0,
            "published_at": "2024-07-07T23:38:31Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "12:35 OK, I've not used Rust and I've only read on it a little bit, but shouldn't it be possible for Rust to include a garbage collection as a library? Technically, reference counting is a form of GC so, in a way, Rust already has a kind of GC in the form of Rc (and Arc) and AFAIK, that's just a part of the standard library, not some kind of special language primitive. You could also write your own Rc in Rust if you wanted. Similarly, you could also write your own *tracing* GC, though it would be more effort. In fact, based on short googling it seems someone *has* written some kind of GC library for Rust. Now, the next step would just be for Rust to include something like that in its standard library. Then, every Rust programmer could make their lives easier and use tracing GC but only when and if they want to.",
            "author": "@seneca983",
            "like_count": 0,
            "published_at": "2024-07-07T22:36:42Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust, the only community that can bully you into using their niche language.",
            "author": "@panjak323",
            "like_count": 0,
            "published_at": "2024-07-07T22:13:08Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I only golang let me comment a line without crying about unused variables.\n\nAlso \"you don't have to make backflips to get the code to work\" - I disagree with this statement. In Rust you are responsible for all the lifecycle stuff. It is PART of your code. You get to do things because of it. Of course garbage collector makes this way easier. But you have to have a garbage collector. If you don't mind having it, why would you use low-level things like Rust (or C) in the first place? Why would you use Mongo in something that needs high safety or perfomance?\n\nComparing python or typescript to Rust or C makes zero sense. Using them for the same tasks makes zero sense too.",
            "author": "@yavvivvay",
            "like_count": 0,
            "published_at": "2024-07-07T19:45:46Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "You’ve just convinced me to stay away seeing that syntax. I’ll stick with Go and Python.",
            "author": "@Ic37r011",
            "like_count": 0,
            "published_at": "2024-07-07T19:23:16Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I don't know why people avoid using C++, one language to rule them all.",
            "author": "@stonail665",
            "like_count": 0,
            "published_at": "2024-07-07T19:07:14Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "The conflict with all languages is compile time vs run time. The attempt to catch all run time errors at compile time is misguided and eventually leads to a complete tangle. And instead of taking the time to understand this, it seems everyone and their dog is making a new language just to learn the hard way that everyone else was not dumber than them after all.",
            "author": "@DinoDiniProductions",
            "like_count": 2,
            "published_at": "2024-07-07T14:44:27Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "nice bobo",
            "author": "@sumitmangar8563",
            "like_count": 0,
            "published_at": "2024-07-07T13:39:08Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Pls push zig more!",
            "author": "@smaplessmap5355",
            "like_count": 0,
            "published_at": "2024-07-07T10:48:42Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Object Pascal is really very good! Generics. Messaging. Type Helpers... and the new lambda functions... it is seriously a great readable language. In fact, I am yet to come across a large code base that is as readable and maintainable as object pascal. The verbosity is just minimal more, I feel but it yields so much more readability that the verbosity becomes a strength. Plus, managing memory is actually very easy too! Stack traces--- really nice out of the box. I've not broken a sweat debugging something in Lazarus. \n\nToo bad that no content creator has experienced the benefits first hand.\n\nAnd I've always felt that PHP was a fantastic language way back in version 5.x. The new version simply rocks!!!! I am personally saddened by how false propaganda obscured truly great dev ecosystems.",
            "author": "@StanleyStephen",
            "like_count": 1,
            "published_at": "2024-07-07T07:06:18Z",
            "sentiment": "LABEL_2",
            "emotion": "sadness"
        },
        {
            "comment_text": "The author doesn't really have much experience with other languages.",
            "author": "@SJ-ds8lp",
            "like_count": 0,
            "published_at": "2024-07-07T06:31:06Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "They used to say Rust would replace C++. The reality today is that much more code is being written in C++, and the language is growing faster than ever. My best professional decision 15 years ago was to focus on well-stablished technologies such as C++, Python, JavaScript, SQL, etc, and not stress about reinventing the wheel in niche languages like Rust or whatever comes new.",
            "author": "@christianm4906",
            "like_count": 39,
            "published_at": "2024-07-07T04:07:35Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "JavaScript is much more frustrated language, for example:\n            for (refEl of jsonres) {\n                const dtEl = document.createElement(\"dt\")\n                dtEl.innerText = refEl.name\n                dtEl.onclick = function () {\n                    moveToLineInFile(refEl.path, refEl.line, refEl.col)\n                }\n                refs.appendChild(dtEl)\n            }\nfor some reason all entries get the last values of the array. Why?",
            "author": "@kamertonaudiophileplayer847",
            "like_count": 0,
            "published_at": "2024-07-07T03:06:48Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "The fastest is assembler.",
            "author": "@kamertonaudiophileplayer847",
            "like_count": 0,
            "published_at": "2024-07-07T02:50:00Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Zig is fastest now, right?",
            "author": "@theaugur1373",
            "like_count": 0,
            "published_at": "2024-07-07T01:09:58Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Smart pointers in C++ don't help when you use threads or try to use async.",
            "author": "@ehfoss",
            "like_count": 0,
            "published_at": "2024-07-06T23:40:31Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "*Just laughing in Java*",
            "author": "@TalDSruler",
            "like_count": 0,
            "published_at": "2024-07-06T23:29:19Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "I call them mutecies",
            "author": "@johnbruhling8018",
            "like_count": 0,
            "published_at": "2024-07-06T22:53:29Z",
            "sentiment": "LABEL_1",
            "emotion": "disgust"
        },
        {
            "comment_text": "Accepts that all the things the author says suck about Rust actually do suck. Admits Rust forces you to accept code duplication. Still thinks Rust is a good language somehow.",
            "author": "@amorphousblob2721",
            "like_count": 0,
            "published_at": "2024-07-06T20:58:31Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I can't use Rust because the FOSS community is becoming too toxic and poisonous.",
            "author": "@GregoryAlbright-t3p",
            "like_count": 0,
            "published_at": "2024-07-06T18:47:57Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Rust is easy when you don't use it",
            "author": "@zx-sy1qh",
            "like_count": 4,
            "published_at": "2024-07-06T18:30:22Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Skill issues.",
            "author": "@PaulSebastianM",
            "like_count": 0,
            "published_at": "2024-07-06T17:42:19Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "The bash community has been the nicest ive been in so far",
            "author": "@abbatrombonelol",
            "like_count": 0,
            "published_at": "2024-07-06T15:58:15Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "The fastest language is ALWAYS going to be fastest is good assembly.  Then good C (with embedded assembly).  Use of libraries doing this also makes sense.  Mixed technologies to get speed and productivity.  You need skilled people.  Very skilled.  We need to stop trying to have programming languages make up for poor skills.  It’s just COBOL redux.",
            "author": "@alphabasic1759",
            "like_count": 0,
            "published_at": "2024-07-06T15:48:07Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Lol\n\nPython is fast! :)",
            "author": "@germainlechapelain3254",
            "like_count": 0,
            "published_at": "2024-07-06T15:37:56Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "\"Look how much better this Go code looks\"\nThe Go Code: Almost 50% of the lines are \"return nil, err\" or \"return result, nil\" 🤮",
            "author": "@sburton84",
            "like_count": 0,
            "published_at": "2024-07-06T15:08:49Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "13:57 “In Go I know when I’m going to get borked, and I can handle it”\n\nHow does idiomatic Go code “handle it”? 🤷‍♂️ mostly just `return nil, err`",
            "author": "@madlep",
            "like_count": 0,
            "published_at": "2024-07-06T14:28:33Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "blaming on skill issue for poor documentation/responses over convoluted designs, should be a diagnostic symptom of autism. well I don't see you born writing assembly, don't i? isn't any language fundamentally judged by its convenience long or short term?",
            "author": "@yangtimothy7351",
            "like_count": 0,
            "published_at": "2024-07-06T11:11:40Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Primeagen just smacked me in the face with his completely brushed over and non-chalant \"no-squeal\"",
            "author": "@jeffreymartin6536",
            "like_count": 1,
            "published_at": "2024-07-06T08:23:04Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Did we just spend 40 minutes on an article from Any Bernard who couldn’t forget to mention he went to Cornell?",
            "author": "@michaelscofield2652",
            "like_count": 0,
            "published_at": "2024-07-06T06:11:59Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I think the decision to panic on write to a closed channel is to guide programmers to the pit of success. The idea in Go is that only writers should close a channel. Typically you run into this problem if a reader closes the channel. Obviously there are issues with that in a multi-writer setup, but there are also ways around it. \n\nIt my experience, every time I wish it would return an error when writing to a closed channel rather than panic, I end up with a more elegant solution after re-thinking it.",
            "author": "@DavidMartens1",
            "like_count": 0,
            "published_at": "2024-07-05T22:26:21Z",
            "sentiment": "LABEL_1",
            "emotion": "fear"
        },
        {
            "comment_text": "You won't respond because you're afraid (of being correct)",
            "author": "@tacitus_",
            "like_count": 0,
            "published_at": "2024-07-05T20:48:20Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "I enjoy learning rust to improve my way understanding of core CS concepts that I skipped / missed by being self taught",
            "author": "@WillDelish",
            "like_count": 0,
            "published_at": "2024-07-05T20:39:18Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "The `thiserror` crate in Rust is really nice for handling errors IMO. You can easily define errors that hold data, so any error where the message alone isn't enough to know what happened, can also have additional context.",
            "author": "@callumbirks",
            "like_count": 1,
            "published_at": "2024-07-05T19:42:05Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "34:54 It's the enthu, Prime. The childlike enthusiasm of discovering something new or finally realizing the potential in something that you are already aware of, it's what makes you an avid learner and a great developer. I wish people didn't lose that enthusiasm over time but they just do, it's what results in loss of interest and I fear eventually Burnout!",
            "author": "@EDEN-ex7wh",
            "like_count": 1,
            "published_at": "2024-07-05T19:36:45Z",
            "sentiment": "LABEL_2",
            "emotion": "fear"
        },
        {
            "comment_text": "Rust's learning curve is a 4 dimensional shape on a 2d graph but I still love it",
            "author": "@callumbirks",
            "like_count": 0,
            "published_at": "2024-07-05T19:29:10Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "One thing i dont uderstand in General development: Why cant we have an Error handling compiler/transpiler? Make an error message, the compiler makes a \"MANDATORY\" handler in the front-end so that the user is no confused\nSlightly how java does it with throws, but just le the FE know, (without having to impact the BE) -> hey , you called \"this function, you will get 200 or 400 (bad request, wrong entity), 403 - not allowed - generated AUTOMATICALLY out of the code, without having the developer to specify in the rest definition (be it openapi or any other) that this method returns it.\n\nthrow new Error(\"Error message\") => generates {fucntionName}_{ErrorMessage} which gets translated to error codes and then UI can determine the message. What is so difficult to understand FE from a BE perspective (coming from a fullstack perspective)",
            "author": "@iliqnikushev3820",
            "like_count": 0,
            "published_at": "2024-07-05T18:08:48Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "VHDL MENTIONNED",
            "author": "@jacques634",
            "like_count": 0,
            "published_at": "2024-07-05T17:14:25Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I'm a massive skill issue sufferer but I'm having more fun with unsafe c++. I'm not gonna touch rust when I can get good with c++",
            "author": "@pencilcase8068",
            "like_count": 0,
            "published_at": "2024-07-05T15:40:37Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "At some point it's not skill issues anymore, it's just bad design.",
            "author": "@keffbarn",
            "like_count": 1,
            "published_at": "2024-07-05T15:29:09Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Someone spent 18 months using a technology he didn't want to use, using it for the wrong reason, refusing to adapt to the norms of the technology or spend the time to learn the language, and had a bad time.",
            "author": "@Tigregalis",
            "like_count": 0,
            "published_at": "2024-07-05T14:13:55Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "“The wrong duplication is better than the wrong abstraction” I wish I’d heard this when I was starting out!",
            "author": "@humanmerelybeing1966",
            "like_count": 30,
            "published_at": "2024-07-05T12:31:47Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "The more I learn Rust the more I find aspects that I dislike. I like minimal tools whose power resides in advanced combinations of its basics, Rust fails at this so hard. I like explicit operations and Rust hides a lot behind the compiler, things that you need to memorize. I think that knowing it can mislead you easily into doing it the wrong way is another thing I dislike. Now I have it on pause (I need to learn C# for work) but I am not sure I am returning to it. Zig for me checks a lot of the boxes of what I like, at least from outside.",
            "author": "@pif5023",
            "like_count": 6,
            "published_at": "2024-07-05T12:22:53Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Dang Zig more and more tempting! I have learned to write single threaded Rust but I am so wanting to switch since I saw Zig the first time. Dang the FOMO is excruciating. I just need a little hobby language to dabble in low level stuff. Porqué Mariaaa!",
            "author": "@pif5023",
            "like_count": 0,
            "published_at": "2024-07-05T12:07:16Z",
            "sentiment": "LABEL_2",
            "emotion": "disgust"
        },
        {
            "comment_text": "\"once you get into async Rust, it gets really hard\".\n\nWhat's up in Async C++ that makes it easier to code anyways?\n\nGCed language are out of question since they have the benefit of the GC. Library authors just wouldn't need to care whether the things they borrow lives long enough",
            "author": "@antoniong4380",
            "like_count": 0,
            "published_at": "2024-07-05T10:55:24Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Thanks for the recommendation to anyhow. Time to get my question marks sorted out...",
            "author": "@nobodygh",
            "like_count": 0,
            "published_at": "2024-07-05T10:19:14Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "Language designers should take a look at Common Lisp's condition system when implementing error handling, not C, not C++.",
            "author": "@sbenitezb",
            "like_count": 0,
            "published_at": "2024-07-05T10:03:26Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Surely if you want to do the manual stack trace thing, it's just as easy in rust as in go. - yeah, prim has mentioned anyhow, exactly",
            "author": "@maninalift",
            "like_count": 0,
            "published_at": "2024-07-05T08:04:01Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "16:30 lmao beautiful artlike stack traces..are we talking about the same Python here? I admit I got skill issues for days, but I reckon I know a few things and I don't like python's error printouts. I almost prefer bash errors. Go's printouts are ok. Dislike python, I find it almost as bad as Java",
            "author": "@faithful451",
            "like_count": 0,
            "published_at": "2024-07-05T08:00:35Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I saw \"algorithmic trading platform\" and I already knew this dude messed up",
            "author": "@fotnite_",
            "like_count": 0,
            "published_at": "2024-07-05T04:09:42Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "30:55 I definitely do that one.\nThough I definitely enjoy this cycle of refactoring and the code that comes out is pretty good IMO.",
            "author": "@remrevo3944",
            "like_count": 0,
            "published_at": "2024-07-05T03:23:31Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "Nowdays for any artists, coders, or authors who genuinely want to be able to prove their text or art is theirs, should just invest in a 4tb hard drive and screen record the entire process of creation of their works.\n\nA quick workflow to speed it up 10x, render to file, and you'll always have a way to prove that \"yes. I made this. Yes. I wrote this.\"\n\nIt's crazy to have to even think this way, but it would sure be satisfying to be able to link some a hole to the video of you literally crafting it from start to finish. And who knows, especially if you make visual art, you might update any private works to youtube and end up with a following out of the deal.",
            "author": "@markdaga1711",
            "like_count": 0,
            "published_at": "2024-07-05T02:14:03Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Lol who hurt this guy? \"Just give me  a GC\"... If rust had a GC it wouldn't be suitable for a lot of applications. If you want python or go, just use python or go. If random lag spikes due to GC and crashes due to unhandled exceptions don't matter for your application, by all means, use a different language. If these do matter but you want to do something async or multithreaded, it will be hard, not because rust is hard, but because the problem you're solving is hard.\n\nBtw. I disagree with your pyramid there, prime! Most of the time, rust forces you to use Arc and Mutex only in cases where you would have to use similar constructs in C++ anyway, so it's _not_ a speed disadvantage. Rc is _very_ rarely needed (I don't remember ever ending up using it). I'd even say that you are more likely to add runtime overhead using smartpointers in C++ because these do checks at runtime which rust can do at compiletime.",
            "author": "@flyingsquirrel3271",
            "like_count": 0,
            "published_at": "2024-07-04T23:01:33Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "What do you think about `const idx = idxMaybe orelse return null;` or `const idx = std.mem.indexOf(u8, str, \",\") orelse return null;`?",
            "author": "@hansmusgrave7696",
            "like_count": 0,
            "published_at": "2024-07-04T20:52:15Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "The important part of the video is whenttey mention this software was originally Typescript.",
            "author": "@ragectl",
            "like_count": 0,
            "published_at": "2024-07-04T20:34:50Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust makes you want to hate yourself.",
            "author": "@m-j107",
            "like_count": 1,
            "published_at": "2024-07-04T19:35:45Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Rust is the biggest fetish of self-hating masochists.",
            "author": "@m-j107",
            "like_count": 0,
            "published_at": "2024-07-04T19:30:47Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I love shadowing in Rust! I like a whole lot of Rust features, actually. The language designers are \"Right\" (imo, or at least I can appreciate and work with the position they take) about so many things like that. The core Rust language is great. For me, the standard library is fine, and the various ways of doing threading and async, etc., are fair enough. There's a steep learning curve, it's difficult at first, but you get used to it, and once you do it's rapid enough to work in, and the performance is well worth it.  \n\nMy problem with Rust comes in when I try to do general (as opposed to systems and niche) programming with it. To do general programming well, you need a broad, thoroughly implemented, documented and demonstrated set of libraries that address things like accelerated graphics (OpenGL, Vulcan, DirectX, etc), UI, archive storage (zip, etc), image, sound and video encoding/decoding, encryption, shared memory interaction, database interaction, udp and tcp sockets, etc. Without a solid handle on all that sort of thing, you're going to spend months trying to get something working that would take days in some language like C# or Java. It's one thing to spend some weeks or months working the kinks out of your skill issues with the core of a language. The basic syntax and semantics, the sort of idiomatic ways of doing all the super common stuff, like the standard library and threading/async, etc. It's another thing to spend months or years futsing with libraries that just aren't thoroughly implemented, documented and demonstrated, and may not even be finished or even entirely working, and/or may not have very helpful errors, and may have several other versions which are in a similar state.",
            "author": "@shavais33",
            "like_count": 0,
            "published_at": "2024-07-04T19:08:42Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Okay but to be fair, an Algorithmic trading platform in Typescript of all languages lmao. This article is riddled with foreshadowing that this guy doesn't really understand systems programming or systems level optimization from the get go.",
            "author": "@callowaysutton",
            "like_count": 0,
            "published_at": "2024-07-04T19:07:38Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "PHP had the friendliest community. \n\nThere was a moment when Zend tried forcing the Zend Framework on the community. It became extremely terse and PHP lost about 70% of its programmers.\n\nPHP might be nice again. For a brief moment PHP was like the people who created Rust or Zig. They wanted to control the way people think.",
            "author": "@yintercept4612",
            "like_count": 0,
            "published_at": "2024-07-04T19:02:48Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Go's way of handling errors is the worst thing after \"errno\". Exceptions are fine. The worst thing that can happen with them if you don't check all cases is an error message that isn't very informative being shown to the user.",
            "author": "@sergrojGrayFace",
            "like_count": 0,
            "published_at": "2024-07-04T18:44:30Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "This dude just writes rage bait articles and admits it is rage bait to farm clicks. I don't know what to tell you other than that's just a bad blogger.",
            "author": "@RetoonHD",
            "like_count": 0,
            "published_at": "2024-07-04T18:17:03Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "32:35 - To master c++ is like mastering bating.",
            "author": "@sergrojGrayFace",
            "like_count": 0,
            "published_at": "2024-07-04T18:07:53Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "This mofo just chatgpt'd his way to write all the typescript to rust. He is just a mediocre developer.",
            "author": "@RetoonHD",
            "like_count": 0,
            "published_at": "2024-07-04T17:49:03Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "that guy lost it when he mentioned 6 fig. thats the worst way to defend...",
            "author": "@duckydude20",
            "like_count": 0,
            "published_at": "2024-07-04T17:27:58Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Just thinking about Rust makes you slap some balls, think about that for a sec!",
            "author": "@gund_ua",
            "like_count": 0,
            "published_at": "2024-07-04T16:25:47Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "A really tone deaf article imo because most of the things he complains about are things that users consider features, not faults. It's ok that it's not for everyone but you should realize as someone who doesn't like it, that your perspective isn't absolute. Just go on your own way using the tools you like, trying to discredit the tools that others like just makes you look foolish. There's always a reason why people like and use what they do. Rust asks me to write programs that make more sense to the processor, instead of asking the processor to run programs that make more sense to me. And that's a better way to work, imo, and i'm not ok with taking a few hundred milliseconds here and there so casually like that.\n\nEssentially, an article like this is about the author, not Rust. The takeway is not \"Rust is bad\" it's \"The author tried but still doesn't 'get' it.\"",
            "author": "@redcollard3586",
            "like_count": 0,
            "published_at": "2024-07-04T15:45:11Z",
            "sentiment": "LABEL_1",
            "emotion": "disgust"
        },
        {
            "comment_text": "Algorithmic trading in typescript 😂",
            "author": "@redhot678",
            "like_count": 0,
            "published_at": "2024-07-04T15:27:27Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "34:56 I \"recently\" discovered that you can use catching an exception for correcting the user input (aka during something useful, instead of just throwing an error and or moving on).\nOfc u can't use it everywhere but at that time i thought it was pretty neat (was like 6y ago)",
            "author": "@Hastur_TKY",
            "like_count": 1,
            "published_at": "2024-07-04T15:05:13Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Crazy how rusties always write \"skill issue\" to valid complaints about their language but when experienced devs call out obvious skill issues with rusties they always get their panties in a twist",
            "author": "@rusi6219",
            "like_count": 34,
            "published_at": "2024-07-04T14:05:50Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "Bro needed stack traces, here we go:\nanyhow = { version = \"1\", features = [\"backtrace\"] }\nand then:\nexport RUST_BACKTRACE=1\n\nBro did not RTFM.",
            "author": "@stevenhe3462",
            "like_count": 0,
            "published_at": "2024-07-04T13:25:48Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "They both get this wrong: garbage collectors do not solve the complexity of generic programming, boxing and type erasure does.",
            "author": "@stevenhe3462",
            "like_count": 1,
            "published_at": "2024-07-04T13:19:47Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "\"Current Software Engineers have no Deep Knowledge.\" —Jonathan Blow\nThis bro does not understand, trait bounds in a where clause is exactly the kind of things LLMs are bad at. It takes understanding of \"subtype and variance\" to mess with multi-parameter generic Rust. And, even if so, one does not simply build complex generics in Rust only because they can.\nBtw, bro did not need a Pin<Box<dyn>>, but another generic parameter that implements Future.",
            "author": "@stevenhe3462",
            "like_count": 0,
            "published_at": "2024-07-04T13:15:19Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I can tell you developed your opinions on Haskell from other people rather than your own experience because you criticize Rust for being like Haskell then you forget that the paradigm differences between the two gives you parallelism virtually *for free* in Haskell.",
            "author": "@demesisx",
            "like_count": 0,
            "published_at": "2024-07-04T12:53:27Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "It's definitely not a skill issue. You could say that not being able to write code in brainf**k is skill issue...",
            "author": "@andrej7942",
            "like_count": 1,
            "published_at": "2024-07-04T12:46:14Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "That post reminds me of the old line that REAL PROGRAMMERS can write Fortran in any language.\n\nLearning a new programming language isn't just learning new syntax, just as learning a natural language isn't just learning new vocabulary. This sentence is German to English without grammar adjusting translated. With programming languages it naturally gets frustrating when the familiar patterns no longer work and you have to learn new ways of structuring your programs.",
            "author": "@drno87",
            "like_count": 1,
            "published_at": "2024-07-04T12:45:07Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "And man, I wish the PHP community was as friendly and you make them out to be. If you're in the Laravel ecosystem, yes, it's pretty nice here, but go ahead and ask a question about it on /r/php, oh boy will you be surprised how much hate you'll get.\nDon't forget Taylor Otwell was called the \"most dangerous PHP programmer\" lol",
            "author": "@RemizZ",
            "like_count": 0,
            "published_at": "2024-07-04T12:44:53Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "This language absolutely sucks:)",
            "author": "@tajsec498",
            "like_count": 0,
            "published_at": "2024-07-04T12:13:19Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "For 95% of programmers code performance is actually not really  your limiting factor. As long as you avoid accidential N²  loops, your programs' performance is going to be limited by database access times. That is why gc languages are so popular. \nThe right tool for the right job.",
            "author": "@amoskevitz",
            "like_count": 28,
            "published_at": "2024-07-04T11:44:37Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "12:50 made me scream \"just use Java!\" The author did not choose the right language for them 😂",
            "author": "@btarg1",
            "like_count": 0,
            "published_at": "2024-07-04T11:02:49Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Me hearing DRY is overrated while moving duplicates code to an abstraction",
            "author": "@88Nieznany88",
            "like_count": 0,
            "published_at": "2024-07-04T09:39:32Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "One of the many things I love about Prime is he explains things - e.g. \"shadowing\".\n\nIf I had the time I expect I could watch Prime learn (and stream) a language and end up understanding all the \"what's\" and \"why's\", just because he'll explain things if you ask.\n\nOne of the best teachers I've seen, and I haven't even watched his courses yet. 🤙",
            "author": "@Grumpicles",
            "like_count": 40,
            "published_at": "2024-07-04T09:26:32Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "This guy sounds like he has no idea what he's doing.",
            "author": "@notapplicable7292",
            "like_count": 0,
            "published_at": "2024-07-04T09:24:33Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "To be honest, if he looks at gaining some profit, and he looks at \"every second makes the difference\" he is already at wrong place, like you highlighted near 37:30. You either try to predict the event before it happens, in which, you don't need a prefect entry and in that i mean a perfectly hardware-optimized language to do your shit. I don't get his argument to switch over to Rust.",
            "author": "@Neuroszima",
            "like_count": 0,
            "published_at": "2024-07-04T08:36:28Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "24:00 nws",
            "author": "@tansanDOTeth",
            "like_count": 0,
            "published_at": "2024-07-04T08:20:30Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Yeah, main issue here skill in Rust. I am ex-Java developer and the transition has been so painful, because you need to fundamentally re-think your're approach. He is right, that the type system although great in theory, in practice is a pain in the ass. It really would help if Rust analyzer had an LLM integrated to help you with the correct types you need.",
            "author": "@_arshadm",
            "like_count": 0,
            "published_at": "2024-07-04T07:51:37Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "Only choose Rust if you dislike debugging.",
            "author": "@alexandervantrijffel9435",
            "like_count": 0,
            "published_at": "2024-07-04T07:25:52Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "About 19 years ago I joined a project (a game world editor written in C++) which was so unstable that it was literally not possible to run it for longer than two hours before it crashed due to some internal corruption.\n\nAfter looking at the code, I saw that it was a case of defensive programming where the code did try to address issues by \"doing nothing if a parameter was wrong\", resulting in some times long sequences of operations doing \"nope, can't do\" until somewhere down the line something crashed... making it quite impossible to find where the actual incorrect parameter came from in first place.\n\nI asked the users in the team if it was fine if I made their life worse for the next two weeks, with the promise that after that the tool would become dramatically more reliable.\n\nThey agreed, so I put assertions everywhere, including things like \"assert(this)\" because yes, the code would regularly call methods on null pointers, and I made sure to have a crash exception handler which would automatically send emails to a list read by my team.\n\nWe released the version and immediately got swept by an avalanche of emails, I exported them into an easily sortable list of culprits going from high to low occurrence, with the assert message, actual file path and line where the error happened, then we distributed the work load on the top 10 issues between the three of us in the team, fixed these (they were really dumb bugs, like memory allocations not checked for errors, null pointers, arrays out of bounds, etc...) pushed a new version the next day.\n\nThere were still quite a few errors, but that was like half of what we got the previous day.\n\nRince and repeat, and by the end of the week the number of crashes was back to what it was before we did that work, one week after that and instead of two hours the code would crash after an average of 4 hours.\n\nFast forward a couple of years, and I got a Skype message from one of the users playfully telling me \"Guess what!!!! The tool crashed this morning, did not saw that happened in months!\".\n\nSo yes, asserts are a nice way to guarantee you trap issues as early as possible, makes it much easier to diagnose the problem.",
            "author": "@DbugII",
            "like_count": 0,
            "published_at": "2024-07-04T07:16:19Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "i dont know you for long time but using chatgpt to write artcicle is not a shame....if you like what you do and people like you content its ok",
            "author": "@tcgvsocg1458",
            "like_count": 0,
            "published_at": "2024-07-04T07:10:05Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "Elixir's pattern matching and guards (and crashing itself) are a perfect example of such assertions built into the language philosophy.",
            "author": "@elixirfun",
            "like_count": 0,
            "published_at": "2024-07-04T06:48:32Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I don't consider Rust a \"safe\" language.  Fundamentally it has to interact with unsafe code (OS APIs, external libraries, etc) to get things done and pretends this can't happen.  C# doesn't lie about this this has the unsafe context and pointers built in.  Sure you can consider the code interacting with itself safe but once it has to interact with things external to it, it's fucked.  I like C# in that it doesn't pretend with its abstractions of pointers to references and array bounds checking.  Don't even have to think about it and give stupid hints.  It Just Works™ Doesn't matter what language you use, you're going to memory leak not thinking enough about lifetime and it's very hard.  Freeing memory early with bad pointers isn't going to solve this but make it worse with more opportunities for exploitation.",
            "author": "@KillerQ13",
            "like_count": 1,
            "published_at": "2024-07-04T06:37:42Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "from other side togglebit is one of the nicest twitchers out there ;)",
            "author": "@ikirachen",
            "like_count": 0,
            "published_at": "2024-07-04T06:24:11Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "C# is the nicest community ... check StackOverflow",
            "author": "@ikirachen",
            "like_count": 0,
            "published_at": "2024-07-04T06:22:37Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "Have they seriously started an algorithmic trading platform in TS? In a field of information technology where every millisecond is crucial to differentiating one's service from those of competitors, choosing a good technology base is more than important, and they failed miserably.",
            "author": "@pyqio",
            "like_count": 0,
            "published_at": "2024-07-04T06:07:10Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "the convenience is easy",
            "author": "@andrewdunbar828",
            "like_count": 0,
            "published_at": "2024-07-04T05:56:41Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "I was going to make a comment but it may not live long enough",
            "author": "@DaviAreias",
            "like_count": 0,
            "published_at": "2024-07-04T05:26:21Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "I love the idea of Zig. They don't have a 1.0 release yet, but when that happens, in 3-5 years.... Then sure! We'll pivot to it from Rust. But where's rust going to be by then? 😊",
            "author": "@CGMossa",
            "like_count": 0,
            "published_at": "2024-07-04T05:25:57Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"PHP has the nicest community.\"  Uh...have you seen Internals?  The PHP Internals mailing list where the real work in PHP core development is done is one of the most toxic communities in existence.  They will absolutely chew you up and spit you out.  Outside of that, sure, PHP user space communities are a lot better and much less toxic.  StackOverflow is a gentle breeze compared to the toxicity of PHP Internals.",
            "author": "@privacyvalued4134",
            "like_count": 0,
            "published_at": "2024-07-04T05:24:28Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Safest hammer to protect your nails from being hit. I hate these blunted R&D nerds always Cunning Ham. \"Windows\" entry because they don't know how to knock on a door.",
            "author": "@DudeSoWin",
            "like_count": 1,
            "published_at": "2024-07-04T05:16:44Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "😂 Snake and the big yellow square...",
            "author": "@abraham_o",
            "like_count": 0,
            "published_at": "2024-07-04T04:21:39Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Interested in the Bellman Ford algorithm crypto bot you mentioned, is that code up anywhere?",
            "author": "@SHB113",
            "like_count": 1,
            "published_at": "2024-07-04T03:49:41Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I prefer gleam to rust",
            "author": "@立立山立山立",
            "like_count": 1,
            "published_at": "2024-07-04T03:43:43Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Regarding language performance, unless all your development is CPU bound just choose the language that's most productive for you.",
            "author": "@technolung",
            "like_count": 1,
            "published_at": "2024-07-04T03:39:39Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Find it very strange to think of shadowing as changing the type of a variable...since that's not at all what's happening. You're either redeclaring a variable name in the same scope or declaring a new variable in a scope that supersedes the variable of the same name in an outer scope. In the former (same scope), you've just made a totally new variable, not changed the type of it -- that implies a dynamic language, e.g. `let foo = true; foo = 2;` (changing type) is very different than `let foo = true; let foo = 2;` (redeclaring). In the latter (inner scope), you have two completely different variables with different priorities -- i.e. once you reenter the outer scope the outer scope variable will still be there with its original type completely unchanged.",
            "author": "@ChrysusTV",
            "like_count": 1,
            "published_at": "2024-07-04T03:26:47Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "acrost vs. acrossed",
            "author": "@andrewdunbar828",
            "like_count": 0,
            "published_at": "2024-07-04T03:20:28Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "catch-by is the new try-catch",
            "author": "@andrewdunbar828",
            "like_count": 0,
            "published_at": "2024-07-04T03:14:34Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "12:30 😂😂",
            "author": "@MyAmazingUsername",
            "like_count": 1,
            "published_at": "2024-07-04T03:03:58Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "They always say it’s a skill issue because they want to see you suffer as they did. Once they overcome that skills issue themselves they will never admit how hard it was or that it is bad design or anything, they will tell you that it is just a skill issues and will take a popcorn and watch ur struggles 😂",
            "author": "@JohnDoe-ji1zv",
            "like_count": 4,
            "published_at": "2024-07-04T02:59:33Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"Horrible Error Messages\" most obvious indication of a skill issue",
            "author": "@MrCumberlander1",
            "like_count": 67,
            "published_at": "2024-07-04T02:50:33Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "rust has a dedicated type alias for the first issue: BoxFuture",
            "author": "@vmarzein",
            "like_count": 0,
            "published_at": "2024-07-04T02:45:16Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "In 2024, everything is a skill issue. Including use after free.",
            "author": "@sirhenrystalwart8303",
            "like_count": 0,
            "published_at": "2024-07-04T02:42:49Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Just started learning Rust.. compared to JS? HECK YEAH. JS is just a mess..",
            "author": "@mitaskeledzija6269",
            "like_count": 1,
            "published_at": "2024-07-04T02:40:28Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "Can't agree more with \"wrong duplication is better than wrong abstraction\", i hate when for the sake of not writing the same 2-3 lines of code in different places we make the codebase unmaintainable by abstracting increasing the actual code complexity 10x and making almost impossible to change a little bit without breaking everything.",
            "author": "@Lemmy4555",
            "like_count": 1,
            "published_at": "2024-07-04T02:38:52Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Threads > async",
            "author": "@JohnDoe-np7do",
            "like_count": 0,
            "published_at": "2024-07-04T02:29:45Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Acually catched this article on medium before you covered it, the whole time I was reading it I was thinking about how you would react to this article, haha.",
            "author": "@maximenadeau9453",
            "like_count": 81,
            "published_at": "2024-07-04T02:24:44Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Nim sucks 😂",
            "author": "@JohnDoe-np7do",
            "like_count": 0,
            "published_at": "2024-07-04T02:22:13Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "\"they rather say it's a skill issue\"\n\"It's probably the skill issue\"\n\nAhah ookey",
            "author": "@morglod",
            "like_count": 1,
            "published_at": "2024-07-04T02:21:41Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "What I got from the video is that the guy decided to rebuild his app in Rust just because the hype and to show off. And got burned. If you are not experienced with any language and decide to refactor a program and you fail, then is skill issue and you problem, not the language. In my case, after hearing about the hype, I check the Rust book. I found that the functional features and available libraries are nice. After consideration, I got the conclusion that Rust could be a good language to rewrite a very slow Python script I am currently using. Now I am learning Rust and making an small project to check if there is any rough edge that would be a turn-off. If you fall into the hype is your problem.",
            "author": "@tychoides",
            "like_count": 0,
            "published_at": "2024-07-04T02:17:50Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "bro should regret building an algo trading bot just to beat the market by .5% lmaooooo",
            "author": "@regretamine.drifts",
            "like_count": 0,
            "published_at": "2024-07-04T02:17:37Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "My main takeaway from this video are: 1. every tech has pros and cons, 2. give constructive feedback, it is JUST BETTER for the community as a whole, 3. don't be an A-ROLL and 4. try to exercise empathy, as Primeagen does. In this case, is it a skill issue? Recommend the person trying another language, because yatayatayata....",
            "author": "@Lucas2RC",
            "like_count": 1,
            "published_at": "2024-07-04T02:00:50Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I like rust because I can write it fast, and if I need it to execute faster, the ability to do that is already there.  Clone Arc Mutex = done.  Then tighten up the loops and algos - then tighten up the memory management.  Often times, your code is slow because you are using Clone Arc Mutex somewhere in your algorithms and loops.  Cleaning this up first will have good memory management side effects and most times, you won't need to go into phase 2 or rewrite anything.",
            "author": "@EhdrianEh",
            "like_count": 0,
            "published_at": "2024-07-04T01:38:46Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "22:15 is definitely more indicative of Redditors than it is the Rust community. Redditors HATE giving you real advice instead of just shitting on your already made decisions.",
            "author": "@philosophiabme",
            "like_count": 3,
            "published_at": "2024-07-04T01:33:06Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "nil channels can be quite useful when you combine a for loop with a select of multiple channels. Once one channel closes you can assign it to nil and avoid busy waiting. This was discussed in 100 Go mistakes.",
            "author": "@martingreler6236",
            "like_count": 0,
            "published_at": "2024-07-04T01:08:30Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "25:38 \"woow that was crazy\" me when i try to improve in vim :(",
            "author": "@nicolaspereyra8917",
            "like_count": 0,
            "published_at": "2024-07-04T00:47:49Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "I find it funny that is a crypto bro/AI guru. Can't take the dude seriously",
            "author": "@IamKAyrox",
            "like_count": 0,
            "published_at": "2024-07-04T00:37:01Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "I regret learning Rust as well. It's so painful to write, but you know what? My program is way too complicated for me to be chasing down bugs. Rust's error handling allows my program constant uptime with ultra-precise error handling that I use to do anything: generate code to execute, write out to local memory, return to a previous step in the program with modifications in the app state that will avert the error, etc.\n\nSeriously, my program has to constantly deal with input that causes errors because it wasn't prepared for said input. Every 20 lines is another error to handle.\n\nI tried doing it in Python, but I'm too skill issues to put a try except everywhere one needs to be.\n\nI miss Python, I hate writing Rust, but at least I know I'm safe. Rust's got my back.\n\nAlso, Python is slower than a sloth suffering from crippling arthritis. If your language punishes using for loops, than it's your language with the skill issues. Ridiculous.",
            "author": "@GrizikYugno-ku2zs",
            "like_count": 5,
            "published_at": "2024-07-04T00:33:39Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "I think the point about community is an important one. Rust has a pretty high learning curve, and unfortunately that can tend to attract people that prefer to pat themselves on the back rather than actually trying to build things together with others. At the language level though there's a lot of focus on things that make it more newcomer friendly such as good documentation, error messages, and tooling, which I see as a really good sign.",
            "author": "@Tobi-ci3ns",
            "like_count": 1,
            "published_at": "2024-07-04T00:18:15Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "This guy is trash at Rust. I don't even remember learning about the ? operator in the book. Why does this thing exist? The whole point of Rust is the amazing match operator.",
            "author": "@GrizikYugno-ku2zs",
            "like_count": 0,
            "published_at": "2024-07-03T23:49:40Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Welppp…back to C.",
            "author": "@tomrkba4685",
            "like_count": 0,
            "published_at": "2024-07-03T23:35:50Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"It reads really nice.\"\n\n[a person with ADHD]: \"Excuse me what\"",
            "author": "@MatthewDeaners",
            "like_count": 0,
            "published_at": "2024-07-03T23:35:13Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "I have to strongly disagree that the frustrations you find with rust are a skill issue. It's bad design",
            "author": "@KayOScode",
            "like_count": 3,
            "published_at": "2024-07-03T23:34:04Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "As a member of the PHP community for maybe 10 years now, I can tell you we're pretty nice because the language was so bad for so long, and it was a punching bag for that whole time, that there isn't that holier than thou attitude you'll find in other languages. We had to collaborate and get on with one another if we were to find success using this language.",
            "author": "@Griffolion0",
            "like_count": 0,
            "published_at": "2024-07-03T23:25:01Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I'm writing code to do algorithmic trading.  \n\nLuckily, it is not high frequency trading, so I can write in Python.  I shudder at the thought of trying to do it in C let alone Rust.  (Having datetimes alone is SO useful... and NoneTypes, so I can set variables to None and easily catch when the data service just decides it's not going to provide certain data... and BeautifulSoup for trolling through XML and HTML, since I've had data sources using those.. )  \n\nI didn't have to make any agressive use of async.  (one of the APIs is all async, so I just stop and wait for a reply so I can treat it as synchronous. This is to simplify the code)  \n\nThank goodness the types of trades the firm i work for are doing, appear to be ENTIRELY done by hand by almost every other firm that does them (like they take 10 minutes to an hour to react to these signals), and the trade platform we use is not built for max speed, we are not sweating trying to shave a few 100 ms off.  I think it takes about 1.5-2 seconds now, and could be shaved down to like 0.5 seconds if I requested all the stock data in paralllel, taking advantage of the async, but it'd be harder to ensure correctness.\n-----\n\nSeperate thing, I do agree with you, Rust's design is not horrible.  The learning curve is rough, but it's giving you lower level like C while ENFORCING safe programming practices. I'm in love for Python but if I had to write some high-performance code, I'd do Rust before I did plain C.  I think Rust would be horrible to use for some tasks that one would use R or Python for; but on the other hand, there's uses were Python could probably be forced to work, but would not be appropriate.  I am all for using the appropriate language for the task -- sometimes it doesn't matter and you could write whatever in whatever.",
            "author": "@hwertz10",
            "like_count": 0,
            "published_at": "2024-07-03T23:08:03Z",
            "sentiment": "LABEL_1",
            "emotion": "fear"
        },
        {
            "comment_text": "Rust is not what you want to use when your application requires fast prototyping and quick development responses (like troubleshooting or making quick new features).\nRust would be good at writing a Database  (like a In-RAM Network Distributed Database), but I don't think regular people are brave enough to do that.",
            "author": "@complexity5545",
            "like_count": 0,
            "published_at": "2024-07-03T23:02:48Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Language Acquisition Syndrome! Gear Acquisition Symdrome for programmers : )",
            "author": "@codewizard58",
            "like_count": 0,
            "published_at": "2024-07-03T22:47:05Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I think people whose first language is something else than C/C++ cannot appreciate Rust and complain about the way it is. Going from C to immediately C++ to Java to a bit of Python to Rust is like coming back home after long time of being gone.",
            "author": "@Nonsense_thepodcast",
            "like_count": 6,
            "published_at": "2024-07-03T22:35:01Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "2:50 In algorithmic trading a few miles can cost you the trade.",
            "author": "@katanasteel",
            "like_count": 0,
            "published_at": "2024-07-03T22:32:10Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "What is the Async book?",
            "author": "@HaydonRyan",
            "like_count": 0,
            "published_at": "2024-07-03T22:32:08Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "The problem ins Typescript develpers try to do Rust (with Typescript/Javascript in mind trying to do the same in the same way as JS in Rust)",
            "author": "@vxmediaxv",
            "like_count": 0,
            "published_at": "2024-07-03T22:22:43Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Technically Rust is just another language.",
            "author": "@dennisk648",
            "like_count": 0,
            "published_at": "2024-07-03T22:21:20Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Asserts do not belong in regular code flow",
            "author": "@mattymattffs",
            "like_count": 0,
            "published_at": "2024-07-03T22:19:51Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "In Rust, \"shadowing\" is a concept where you declare a new variable with the same name as a previous variable in the same scope. The new variable \"shadows\" the previous one, meaning that the original variable is still there but becomes inaccessible; any reference to that name refers to the newly declared variable. Shadowing and reassignment in Rust can seem similar because both involve working with a variable name that already exists. However, there are key differences between the two. Even if the original variable was immutable, you can shadow it with a new immutable variable. Each shadowed instance is treated as a completely separate variable by the compiler. You cannot directly access both a shadowed variable and its newer shadow within the same scope because the new declaration hides the previous one. One common use case is within nested scopes, where a shadowed variable can be accessed outside the inner scope where the shadowing occurs. You can also shadow a variable of a copy and then access the original object's variable using dot notation.",
            "author": "@CitizensCommunity",
            "like_count": 0,
            "published_at": "2024-07-03T22:18:23Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "should have used Odin",
            "author": "@MagnusNemo-xc5nx",
            "like_count": 0,
            "published_at": "2024-07-03T22:15:44Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "Php really is the nicest. When you get sit on so much by everyone, you can't help but become aware of the value of good manners.",
            "author": "@realbigsquid",
            "like_count": 0,
            "published_at": "2024-07-03T22:13:20Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Hot take: rust hype is modern day java hype.",
            "author": "@someguy9175",
            "like_count": 0,
            "published_at": "2024-07-03T22:11:18Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "So for the first 6 months or so writting in Rust, i didnt know ? existed, and when i found out about it, i tried it out...after a couppe of errors I decided I hated it (like I'll still use it, just very seldom).\nA lot of Rust I think is a mindset thing, so before Rust the only language I'd used was Python for over a decade, and then about 18months ago now I decided I was gonna try and learn Rust, and personally I found all the compile errors really helpful in telling me I didnt understand soemthing yet, and so to go and learn more about it. So I've never been annoyed at the compiler, and instead found it really helpful .",
            "author": "@t1nytim",
            "like_count": 0,
            "published_at": "2024-07-03T22:09:18Z",
            "sentiment": "LABEL_1",
            "emotion": "anger"
        },
        {
            "comment_text": "as someone who has serious skills issues this dude is clearly one of my kind",
            "author": "@gomesbruno201",
            "like_count": 0,
            "published_at": "2024-07-03T22:04:45Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I've spent 24 months using Rust professionally and I have 0 regrets and have moved my career into 100% rust because everything else feels awful to use now",
            "author": "@chris.davidoff",
            "like_count": 1,
            "published_at": "2024-07-03T21:59:14Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "What’s weird about this article is that Typescript types are just as nasty as the function signature you showed early on. It’s just that typescript aliases its types.",
            "author": "@funkdefied1",
            "like_count": 0,
            "published_at": "2024-07-03T21:51:27Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Brainfuck 🗿",
            "author": "@AlexIsTripping",
            "like_count": 0,
            "published_at": "2024-07-03T21:47:49Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "This guy is pretty infamous in the Rust subreddit. I obviously can't know what's in his heart-of-hearts, but every article he's posted has been pretty sloppy and transparently just advertising for his AI powered finance tools. I distinctly remember one where he claimed to have forked and \"fixed\" a finance crate, to the point where it warranted an announcement on the subreddit. But, all that he'd changed was a single statistical function to give a different result (that he preferred), and then deleted all the documentation and made himself the only author on the crate. In every interaction I've had with him, he's come across as quite unpleasant.",
            "author": "@zactron1997",
            "like_count": 47,
            "published_at": "2024-07-03T21:33:05Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "{anger}",
            "author": "@elidolloff",
            "like_count": 0,
            "published_at": "2024-07-03T21:27:27Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "The first example looks like it would have been so much simpler with a macro.",
            "author": "@follantic",
            "like_count": 0,
            "published_at": "2024-07-03T21:19:00Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Does somebody know what presentation from joran is he talking about? Simeone can link It please?",
            "author": "@BLRMalcolm",
            "like_count": 0,
            "published_at": "2024-07-03T20:57:43Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I avoid the ? operator so I have to think about the error.",
            "author": "@kiseitai2",
            "like_count": 0,
            "published_at": "2024-07-03T20:44:50Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Meanwhile - the Seattle Rust User's Group is pretty awesome. Haven't interacted with anyone else.",
            "author": "@manofacertainrage856",
            "like_count": 1,
            "published_at": "2024-07-03T20:44:26Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "Tbh if rust requires so much effort to learn it, why not just learn to not suck at C++? It's all a \"skill issue\" by this logic",
            "author": "@perz1val",
            "like_count": 21,
            "published_at": "2024-07-03T20:42:43Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "V is a better Go and Rust.",
            "author": "@dovh49",
            "like_count": 0,
            "published_at": "2024-07-03T20:41:21Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "just write it in C, and we got gdb!",
            "author": "@George-lt6jy",
            "like_count": 0,
            "published_at": "2024-07-03T20:39:23Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Tip of that pyramid is ASM",
            "author": "@malismo",
            "like_count": 0,
            "published_at": "2024-07-03T20:35:36Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "If you ain’t using go, you a ho",
            "author": "@dixztube",
            "like_count": 0,
            "published_at": "2024-07-03T20:31:29Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Depending on what kind of algorithmic trading we are talking about, we measure latencies in nanoseconds, not milliseconds. These days most HFTs are able to achieve sub 100 nanosecond tick to trade latency by using predefined order triggers on FPGA.",
            "author": "@alexsmart2612",
            "like_count": 0,
            "published_at": "2024-07-03T20:31:08Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Skill schmill. Just create a better language. After all, this sh!t isn't handed down from God; somebody created it based on their own perspective of what's good. So, create a better one for you.",
            "author": "@yapdog",
            "like_count": 1,
            "published_at": "2024-07-03T20:14:47Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"give me garbage collection\"\njust use go dog",
            "author": "@Requiem100500",
            "like_count": 18,
            "published_at": "2024-07-03T20:11:35Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I thought he was going from C++ to rust. He had his algo trading solution in typescript not even python? \nWild. I mean if performance isn't the concern, python is really well supported in the space.",
            "author": "@bearwolffish",
            "like_count": 0,
            "published_at": "2024-07-03T20:08:17Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "You don't use reference counting and synchronization primitives to \"get around Rust\". You use them because you are implementing systems that require these tools for correctness. They would still be necessary in any other language with concurrency, but Rust forces you to use them for correctness.",
            "author": "@bonsairobo",
            "like_count": 3,
            "published_at": "2024-07-03T20:01:58Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "My experience with the Rust community is that there’s few people in the middle. You have the nicest people you’ll ever meet writing Rust, full of good advice and inclusivity and fun ; but you also have the most pretentious irritable dickheads who think they’re better than you because they write a “hard” language.",
            "author": "@exotic-gem",
            "like_count": 0,
            "published_at": "2024-07-03T19:57:31Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "10:46 if abstracting on all forms of code duplication is wrong I don’t want to be right.",
            "author": "@owenwexler7214",
            "like_count": 0,
            "published_at": "2024-07-03T19:55:17Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Cobol community is good, because they are all retired!! they have no need to compete, no need to find more jobs, hahaha",
            "author": "@pencilcheck",
            "like_count": 0,
            "published_at": "2024-07-03T19:51:24Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "You commit a significant logical error at 23:20.  \"Horrible design choices? I I actually think a lot of the design choices are really good, I think there's a lot of cool things...\"  \n\nThe writer argues \"there exist design choices in rust which are terrible\", to which you respond \"there are design choices that are really good\".  This is like if you order a fancy dinner and you get turd sliders served with your steak.  When you complain about the sliders, the staff point out it came with an A5 steak.  That may be true, but it doesn't address the problem.\n\nIf you mean rust _has no_ horrible design choices, then _that_ is what you should say.  Of course, unless you can identify the alleged horrible choices, and explain why they are not only necessary, but good, then _you_ fall into the exact behavior the writer describes.",
            "author": "@yellingintothewind",
            "like_count": 0,
            "published_at": "2024-07-03T19:49:29Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "The whole skill issue argument is very dumb most of the time. First order of business would be to not make things harder than they should be. It is insane that software developers apparently get a hard on when using tools that are just not as well designed as they should be or are inappropriately hard to use, relative to the complexity of the problem.\nJust imagine any other engineering disciple that would scoff at superior methods or tools, that give you the same result in a more efficient way. There are tons of examples of this in programming languages.\nWhen the complexity of using your tools is appropriate for the complexity of the actual problem, then we can talk about skill issues.",
            "author": "@godDIEmanLIVE",
            "like_count": 0,
            "published_at": "2024-07-03T19:43:40Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Man is using String for an error type....",
            "author": "@nordgaren2358",
            "like_count": 0,
            "published_at": "2024-07-03T19:43:26Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Now its making me regret trying to learn rust, I need to learn something other than python because im running multi threaded ML applications that need performance and thought rust might be good to learn, since GO ml libraries are behind even rust. Where do I go now",
            "author": "@IssaAlBawwab6",
            "like_count": 0,
            "published_at": "2024-07-03T19:39:47Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "If you're using an rc, arc or mutex in rust, but not using it in c++ equivalent code, I bet you have some bugs in your code.",
            "author": "@nordgaren2358",
            "like_count": 0,
            "published_at": "2024-07-03T19:37:05Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "If you say that PHP has the nicest community is because you havent met Elixir yet\nI really dont get why you haven't gotten into Elixir at this point, literally this nicest community in planet earth\nElixir Forum is a big W",
            "author": "@VictorMartinez-vi7jx",
            "like_count": 0,
            "published_at": "2024-07-03T19:35:13Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "Seems like a lot of words to say \"I have skill issues\"",
            "author": "@_Aarius_",
            "like_count": 5,
            "published_at": "2024-07-03T19:33:07Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I agree that C++ is about as hard to master as Rust. The difference is that until you're there, in contrast to Rust, C++ does have a pit of success where you obliviously write code that appears to work but is actually full of undefined behaviour, particularly if concurrency or threading is involved.\n\nNote that I really like using C++. But even the newer language features have their gotchas and footguns and can fail in surprising ways if you try to be an ounce more clever than you really are.",
            "author": "@wolfgangrohringer820",
            "like_count": 12,
            "published_at": "2024-07-03T19:32:20Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "\"It's a skill issue\" - Okay, but so is C or LISP or Fortran.\n\nNot being a Rust guru, the problem seems to be that async code destroys the concept of life times that are lexically bound to code. Rust has no answer to that. That would not be the worst, but Rust makes you fight the simplicity (the one with the steep learning curve) it provides for the easy case.\n\nI think this criticism should just be acknowledged. This code example is horrible. It doesn't matter that Rust error handling has a nice syntax removing the burden of \"if (error)\" replacing it with \"match Ok/Err\". \n\nZig does better here. Even C is not that ugly, unless you are working on Windows.",
            "author": "@michaelutech4786",
            "like_count": 0,
            "published_at": "2024-07-03T19:28:43Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Not a rust guy, and not agreeing with the tone of that reddit comment, but the advice about postgres is \"correct\". MongoDB isn't remotely appropriate for a trading system like that. Bad design decisions have ripple effects, especially in novice code. (Also, apparently, the rust bindings for mongo are not great.)\n\nI've spent a ton of time helping people who wrote algo trading things in some dynamic language before realizing they needed lower level control. They all have bad design decisions that didn't matter too much before, and they all go through all kinds of contortions to try to port their entire codebase over without fixing the design. Either they give up or they ultimately end up making the changes I told them would save them headaches if they went on and ripped the bandaid off up front.\n\nMaybe he needs a work around now and can come back to this design problem later. But it does him a disservice to *just* fix this particular error without pointing out that he ended up having a lot of these problems because of broader architectural decisions that he needs to plan to address at some point if he actually wants to get the performance benefits he's going for without losing his sanity in the process.\n\nMore fundamentally, interacting with his database system isn't on the critical path (or at least it shouldn't be). So, *just maybe*, this isn't something that needed a rewrite at all. Or at least shouldn't have been a high priority, and even then, it probably didn't need a bunch of fancy high performance complexity.\n\nYes, they could have helped him fix the error. But ultimately, he's not going to *learn* if his mental model isn't mapping to the problem correctly.",
            "author": "@MaxHaydenChiz",
            "like_count": 0,
            "published_at": "2024-07-03T19:20:20Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "The code example is so borken... Async-future-await all over the place in the rust example. Where are they in the go implementation? Simple, single-threaded code. Also, if you have zero idea about how to handle context, just take one as input. (huh, apparently mongo client's docs are not going to teach you that either).",
            "author": "@julian7",
            "like_count": 0,
            "published_at": "2024-07-03T19:19:23Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Guy who doesn’t understand his data model complains about language that requires you to give a shit about your data model.",
            "author": "@DannoHung",
            "like_count": 0,
            "published_at": "2024-07-03T19:17:15Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "What's wrong with zig community?",
            "author": "@koool56",
            "like_count": 0,
            "published_at": "2024-07-03T19:15:34Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "My own response to complaints about the Rust community, would be to cite my experiences with the World of Warcraft and No Man's Sky's player communities.  World of Warcraft was a game which was highly competitive; during classic World of Warcraft, Naxxramas, the endgame dungeon, was sufficiently difficult that less than 5% of the overall playerbase was able to even enter it.  As a result, WoW had a playerbase that was much more inclined towards elitism, and influenced by the immense competitive stress that that difficulty caused.\n\nNo Man's Sky, by contrast, is the complete opposite.  It's an almost exclusively PvE game with no elite or end game content, where resources are infinitely abundant and renewable, and where everyone can obtain anything.  The community are correspondingly far more relaxed, friendly, and welcoming.\n\nWhen someone encounters a negative community related to any particular interest, therefore, I think it's important and constructive to realise that there are almost always structural variables which incentivise said negative behaviour; and that rather than simply complaining about said behaviour, it should be realised that if the structural elements are modified, the behaviour will improve by itself.",
            "author": "@petrus4",
            "like_count": 18,
            "published_at": "2024-07-03T19:11:03Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Id love to learn languages like RUST or ZIG but theres practically no work for it. Every job offering in my country is C#, C, Java...",
            "author": "@Balgoriusis",
            "like_count": 0,
            "published_at": "2024-07-03T19:09:57Z",
            "sentiment": "LABEL_1",
            "emotion": "sadness"
        },
        {
            "comment_text": "stooped reading at wanting garbage collector...",
            "author": "@yanushkowalsky1402",
            "like_count": 1,
            "published_at": "2024-07-03T19:08:59Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I've always found it weird that some languages use Null and others use Nil. It may also be that seeing my name all over a language weirds me out a bit, but the mismatch is curious either way",
            "author": "@VilasNil",
            "like_count": 0,
            "published_at": "2024-07-03T19:04:47Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "that run transaction go function returning an `interface{}` (any)  though. isn't that a nonono in go?",
            "author": "@mauricioprado6395",
            "like_count": 0,
            "published_at": "2024-07-03T19:04:38Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust is for people who hypothetically talk about touching a vagina",
            "author": "@StinkyCatFarts",
            "like_count": 0,
            "published_at": "2024-07-03T19:02:59Z",
            "sentiment": "LABEL_1",
            "emotion": "disgust"
        },
        {
            "comment_text": "want easy and good error handling? `anyhow`.\nwant pain and suffering? `Result<_, String>`",
            "author": "@-parrrate",
            "like_count": 0,
            "published_at": "2024-07-03T19:00:41Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "so he didn’t want to take the time to learn rust the right way and complained when he couldn’t use chatgpt to seamlessly change typescript into rust, 2 completely different languages. what a stupid article",
            "author": "@Cadet1249",
            "like_count": 0,
            "published_at": "2024-07-03T18:56:37Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Rust - Error handligng in Rust often omits context. The `?` operator, when you implment the From trait is a prime example!\n\nFor example, a `ParseIntError` has no way to return the offending token that triggered the error without entirely wrapping the error in another user-defined error type (what you should do). It's too easy to pass-the-buck when it comes to error handling in Rust. Skill issue, but *far* too common. It's so bad in the core language, that third party crates had to step up and provide methods, like `*_context()` from Anyhow. Go may be verbose, but at least you explicitly handle errors exactly where they occur in an obvious way.",
            "author": "@kurt7020",
            "like_count": 3,
            "published_at": "2024-07-03T18:56:24Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "17:50\n\n```\nif err != nil {\n  // handle error here\n}\n```\n\nI am surprised that people dislike this form of error handling - it's my favorite. Great point by Prime.",
            "author": "@darkerisbetter8699",
            "like_count": 6,
            "published_at": "2024-07-03T18:56:04Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "i spent 2 weeks on rust and i regret it. \ni also fell into that trap, where everyone says how rust is cool, but in reality, oh, boy, i hated every minute, those stupid options and unwraps where in my nightmares and the build time, omg its \"ritardedly slow\"",
            "author": "@oleksiistri8429",
            "like_count": 1,
            "published_at": "2024-07-03T18:54:52Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "bro someone in the chat said \"blue hair community\"",
            "author": "@Shywizz",
            "like_count": 0,
            "published_at": "2024-07-03T18:47:52Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "a few milliseconds wont make much difference. to need that kind of performance - you will need a whole lot of cash on HFT. having a machine close to the broker is the most important thing. you are going to be lucky to a price update every 100-200ms. then adapt. the market changes shape every few weeks. \n\nthe problem i find with many other devs that get into trading is they try to smart code out the risk of a trade. trading is bloody. thats just the way it is.",
            "author": "@mrrolandlawrence",
            "like_count": 0,
            "published_at": "2024-07-03T18:42:32Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Sometimes you just get an application that no one wants to do work in (or can't effectively) that's written in Rust dropped in your lap and your first experience and learning of Rust is in the worst application known to man... but is site critical.",
            "author": "@suede__",
            "like_count": 0,
            "published_at": "2024-07-03T18:35:38Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "\"I'm using Rust because the interwebs said it's fast. Also, I can't be bothered to spend 30 minutes to understand my own code without an LLM present.\" \nPro tip - performant code in any language requires careful work by someone who knows WTF they're doing.",
            "author": "@7th_CAV_Trooper",
            "like_count": 218,
            "published_at": "2024-07-03T18:33:38Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "The only reason anyone tends to dunk so hard on C++ is because most people are writing things the C (and never the C++) way or they're only maintaining a pre-C++11, probably even a pre-C++03, project. Most of the reason for why they can complain is specifically because its ubiquitous usage, the king's crown often makes a lot of angry and envious enemies. I could give you a list of crap wrong with C++ as a big C++ developer, none of which relate to safety because that is a solved problem in C++, and for which Rust literally cannot compare to and neither would anyone who goes to Rust would ever consider to complain about because they literally don't care for any other feature because its the only thing really going for Rust, elsewise Rust is one of many languages with similar features. Also the lack of a shared object ABI standard makes it exceedingly unsuitable for many applications, bad compilation times mixed with the lack of a universal ABI, which Rust seems unable to solve make it poorly suited. By the way Sean Baxter has proven with his Circle compiler that C++ can support an opt-in borrow checker, he's also about to submit a proposal to the ISO standard for a borrow checker to be added to the language, the issue on the papers github is 1984. (which is hilarious)",
            "author": "@Spartan322",
            "like_count": 0,
            "published_at": "2024-07-03T18:33:29Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "haven’t watched the video yet but i feel like this is gonna be a rust skill issue on the authors part",
            "author": "@sa-hq8jk",
            "like_count": 1,
            "published_at": "2024-07-03T18:32:55Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "The moment a language constantly battles against the programmer, I'm out. It can be as annoying as the forced indenting in Python to the idiotic loops and hoops you have to go through in Rust. I want to enjoy writing code. Fighting it, isn't enjoying it. And all that crap about milliseconds and \"whichever language is the fastest\"-futile discussions: don't fall for it. Choose a language that you enjoy writing in, and one that gets the job done. For me that's TypeScript most of the time. And when I want to get down to millisecond level, which I hardly need to do anymore, it's C++.",
            "author": "@martijn3151",
            "like_count": 25,
            "published_at": "2024-07-03T18:31:48Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "It took me a long time to learn the patterns and mindset required for Rust, and I'm still taking my time to learn it all piece by piece, but IMO it's been worth it.  Perhaps it's just how my brain is wired, but writing Rust is incredibly satisfying for me.  With any other language I am terrified it could spontaneously combust if there's weird data, whereas with Rust everything is clearly laid out, defined, and it all does exactly what it says with no edge cases or strange arbitrary behaviour.\n\nHonestly, it's mostly just personal preference and good teachers!  Rust is really hard to learn.  People will say, \"oh but there's the book and tons of nice videos and written tutorials\" but this really doesn't teach you the core of what makes Rust code different.  Just preaching how cool it is does nothing, and while the learning resources are accessible, they do not help write the mental patterns that are valuable for writing Rust code.",
            "author": "@jupitersky",
            "like_count": 48,
            "published_at": "2024-07-03T18:29:35Z",
            "sentiment": "LABEL_1",
            "emotion": "fear"
        },
        {
            "comment_text": "Imagine a world in which market dynamics change over time. Being able to rewrite algorithms in a reasonable amount of time is more important in such a world than making sure that the trading algorithm can make the wrong trading decision quickly.",
            "author": "@k98killer",
            "like_count": 0,
            "published_at": "2024-07-03T18:27:32Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "5:20 the biggest problem with Rust & async is that Rust _still_ hasn't cleaned its own house up about it, meaning it only very very recently has decided on how to do async functions in traits. That's a big problem because its standard library still hasn't fully caught up to it. & even its very latest release still doesn't seem to have closed the issue entirely as there are still corners which are unimplemented / causes compiler bugs when combined with aliases to traits which are sync but are aliasing async functions.",
            "author": "@FrankHarwald",
            "like_count": 15,
            "published_at": "2024-07-03T18:27:24Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Not all trading algorithms require millisecond precision. You're thinking only about HFTs, dawg.",
            "author": "@k98killer",
            "like_count": 4,
            "published_at": "2024-07-03T18:26:10Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "the moment you write Pin<Box<dyn Future<Output=T> + Send + '_>> you show you don't know about aliases. most base crates for async will now have an alias for that",
            "author": "@-parrrate",
            "like_count": 30,
            "published_at": "2024-07-03T18:22:35Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "At this point I need an honest video of No Boilerplate (@NoBoilerplate) addressing the horrible side of rust.",
            "author": "@akashkarnatak6581",
            "like_count": 0,
            "published_at": "2024-07-03T18:13:22Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "😮 that syntax looks like shyt...will nvr be a Rusty ✋",
            "author": "@adrianspikes6454",
            "like_count": 0,
            "published_at": "2024-07-03T18:12:12Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "I am far from being a Rust expert or even a decent Rust developer, but this is mostly a skill issue + want to use Rust just because everybody is talking about it. Even in the Go code examples, there are a couple of skill issues. What I'm trying to say is we can't say a language is good or bad just because we can't understand the mental model or all the features or design of the language!",
            "author": "@douglasmakey",
            "like_count": 3,
            "published_at": "2024-07-03T18:12:11Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I have to wonder if this guy is having a lot of issues because he's coming from typescript. What I mean by that, people who come from JavaScript tend to jump directly into async rust because they are used to using futures and promises all over the place. You've got a lot of other really nice concurrency primitives that you can use before considering futures.  For example, this guy could rewrite his function as a synchronous function and use a channel to return the result.  \n\nWhen I'm working with rust and I need to have some measure of concurrency or asynchronous programming, I tend to try to find the smallest surface area for that part of my code.  This is to say that most of my code is synchronous. Unfortunately, when you use futures you need to use some kind of executor which means that you're adding some kind of runtime.  In 99% of cases, I've been able to get away with not using many futures and instead using threads and channels.",
            "author": "@draakisback",
            "like_count": 1,
            "published_at": "2024-07-03T18:09:27Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "No mention of the 69 upvotes. Sloppy.",
            "author": "@andrewzuo86",
            "like_count": 0,
            "published_at": "2024-07-03T18:06:39Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "This is how I felt as well trying it for a few days. It seems they have really tried to make everything more complicated than it needs to be. Especially lifetimes and the sheer amount of string types.",
            "author": "@seasong7655",
            "like_count": 2,
            "published_at": "2024-07-03T18:06:22Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Not the biggest fan of Rust myself but \"it's worse than typescript\" is a wild take.",
            "author": "@isodoubIet",
            "like_count": 330,
            "published_at": "2024-07-03T18:03:47Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "comments to that article only reinforced \"rust has toxic community\" take",
            "author": "@zauromarow2566",
            "like_count": 0,
            "published_at": "2024-07-03T18:01:14Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I was in his shoes years ago. I wanted to move away from TypeScript for my trading bot. I was torn between Rust and Go. I tried both. Eventually, I chose Go. It’s just so much better at getting the job done. Considering the time and effort Rust required, to hell with memory safety!",
            "author": "@Alex-hr2df",
            "like_count": 0,
            "published_at": "2024-07-03T17:59:32Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Maximum efficiency, both speed and memory usage, you get with OOP is nowhere near what you can get if you don't do that and don't have GC. But OOP/FP and GC makes a lot of things SO much easier...",
            "author": "@JasonSmith80513",
            "like_count": 0,
            "published_at": "2024-07-03T17:54:58Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "a lot of his code has `map_err(|e| e.to_string())`  ...bad move. If he actually put an ounce of thought in his errors he would know where his errors were.  The async stuff. a legitimate gripe sure. Don't use async rust unless you can write your own futures and understand async rust. Pretty simple",
            "author": "@thomasw.4298",
            "like_count": 0,
            "published_at": "2024-07-03T17:48:54Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "It's always the same 2 types of hate to Rust, either coming from c++ bros feeling restricted by the memory management or coming from memory managed languages bros who don't understand memory. (hate = extremist criticism)",
            "author": "@NotherPleb",
            "like_count": 1,
            "published_at": "2024-07-03T17:46:24Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "OP had `Result<R, String>` instead of `Result<R, Error>` and wondered where his stacktrace went",
            "author": "@TheTmLev",
            "like_count": 1,
            "published_at": "2024-07-03T17:43:31Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "I personally dislike that so much emphasis is placed on memory management when it comes to performance.  Yes, languages like C/C++/Rust with a more manual memory management approach can be faster than GC.  However there's a lot more to performance than just memory management and often times those other aspects are far more important.  If you use Rust but use the wrong data structures and algorithms it's probably going to be dramatically worse than say a GC language with the right ones.\n\nThat said I do really like Rust.",
            "author": "@stochastic84",
            "like_count": 12,
            "published_at": "2024-07-03T17:41:59Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "skill issue 😅",
            "author": "@AbuAl7sn1",
            "like_count": 0,
            "published_at": "2024-07-03T17:41:52Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"At the bottom , you find snake and big yellow square\"",
            "author": "@bige2899",
            "like_count": 0,
            "published_at": "2024-07-03T17:41:03Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Regarding the crazy types, I know it's not the answer to everything but…type aliasing is a thing. You generally don't need to see the craziness in the type signature. Alias that shit, name it meaningfully, and only care about the requirements when they actually come into play.",
            "author": "@Wolfeur",
            "like_count": 0,
            "published_at": "2024-07-03T17:38:38Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Bro hand rolled his own ` backoff::retry(backoff, op)` when he could've just used a crate",
            "author": "@TheTmLev",
            "like_count": 0,
            "published_at": "2024-07-03T17:38:11Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Funny, I thought you were Dr DisRespect just until recently. LOL..",
            "author": "@BobKane-g6x",
            "like_count": 0,
            "published_at": "2024-07-03T17:36:22Z",
            "sentiment": "LABEL_1",
            "emotion": "joy"
        },
        {
            "comment_text": "Rust sucks btw",
            "author": "@gevilin153",
            "like_count": 0,
            "published_at": "2024-07-03T17:34:21Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "2022: Rust is the best\n2023: Go is the best\n2024: Zig is the best\n2025: Gleam is the best\n2026: ???????",
            "author": "@dira4734",
            "like_count": 11,
            "published_at": "2024-07-03T17:27:52Z",
            "sentiment": "LABEL_2",
            "emotion": "surprise"
        },
        {
            "comment_text": "When are you going to try Swift? It’s the sweet spot of Rust and Go. ARC by default with multiple choices of manual memory management, structural concurrency that makes asynchronous code make sense and super powerful generics if you want to go there.",
            "author": "@evoboy67",
            "like_count": 0,
            "published_at": "2024-07-03T17:27:41Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "The `run_transaction` function looks like something you would write in TypeScript, where it would be mostly fine. You're obviously gonna have a bad time porting TypeScript to Rust directly because the same patterns don't work as well, if at all. The original TypeScript project has very questionable architecture to begin with. 100% skill issue.",
            "author": "@roaldhacquebord",
            "like_count": 0,
            "published_at": "2024-07-03T17:26:55Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"Wrong duplication is better than wrong abstraction\" codegirl007 nailed it right there. I'm getting that tattooed on my cheeks.",
            "author": "@diegofloor",
            "like_count": 1,
            "published_at": "2024-07-03T17:18:23Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "We wrote a bunch of our network applications in Nim in  a company that has applications in Python, Golang and Rust. \nNim beats all of them in terms of developer productivity and run time speed.",
            "author": "@PouriyaJamshidi",
            "like_count": 3,
            "published_at": "2024-07-03T17:08:27Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust is a new language. Youre supposed to have haskell and c++ knowledge before you jump into it. Im learning haskell and c++ so I can eventually try rust.",
            "author": "@YTDeletes90PercentOfMyComments",
            "like_count": 0,
            "published_at": "2024-07-03T17:07:53Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "You're the one who wanted the blazingly fast trading algo. Go use C++ then.",
            "author": "@ramb0lxmb",
            "like_count": 0,
            "published_at": "2024-07-03T17:06:17Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "To Hell with Rust!!! People need to stop getting hoodwinked by these BS FOMO nonsense! If Rust IS a Good Language... Then that will NOT be realised, for the next few decades at the VERY least!\n\nUnlike BS JS frameworks... That come and go every few nanoseconds... Languages are something else entirely!!! Thus Rust STILL has a long way to go... If... When... It can supersede established languages like C and C++!\n\nBut that day is NOT today!!! So deal with it!!!",
            "author": "@sdwone",
            "like_count": 0,
            "published_at": "2024-07-03T17:06:13Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Rust has some genuine issues but this guy hit basically none of them and instead spent an entire article whining about his lack of skill. Very disappointing",
            "author": "@lowellthoerner1209",
            "like_count": 2,
            "published_at": "2024-07-03T17:06:06Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "People saying \"skill issue\" is baffling to me. You want a language that just gets out of your way and lets you express what you need to in the code. If you need to think about the language you're using then you're just wasting time.\n(Though I don't get the whole \"just give me a garbage collector\", it has nothing to do with garbage collection)",
            "author": "@rocapbg9518",
            "like_count": 1,
            "published_at": "2024-07-03T17:05:30Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "1000% skill issue.\n\nI've actually replied to the original author as he popped up on my LinkedIn, he's actually since acknowledged all his \"points\", and it's mostly boiled down to basically skill issue.\n\nRust has a learning curve, jumping into Rust without learning it properly, this outcome was inevitable.\n\nOf course, the anti Rust crowd have since read the headlines and have run away with it 🙄",
            "author": "@Anhar001",
            "like_count": 0,
            "published_at": "2024-07-03T17:03:40Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "haven’t seen it all, but so glad someone else just straight up doesn’t like the language. I hate seeing Ok(()). I just don’t like it, even if I know it’s the safest fastest borrowest etc",
            "author": "@bandr-dev",
            "like_count": 0,
            "published_at": "2024-07-03T17:02:25Z",
            "sentiment": "LABEL_0",
            "emotion": "joy"
        },
        {
            "comment_text": "Good rust is great when trying to get a lay of the land. Like Prime said (7:00) rust does look nice... But soon as you start parsing line by line it becomes slkdkbnadbadafl;kjhadfad>>>>>>.'_",
            "author": "@KH40T1C_yt",
            "like_count": 1,
            "published_at": "2024-07-03T17:01:40Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Algo Trading depends on your timeframe. You only need speed in the HFT regime. If your algo is working in > 5min then language speed isn't an issue.",
            "author": "@levintofu",
            "like_count": 0,
            "published_at": "2024-07-03T16:58:24Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "14:04 Add the throws excp in Java and if you want to use the function the one who uses it has to put a try catch otherwise it won't compile, again, it shows the superiority of Java",
            "author": "@s3rit661",
            "like_count": 0,
            "published_at": "2024-07-03T16:52:20Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "you can't discredit people for exploring, true.\nbut most people exploring are not writing articles \"spitting facts\" when all they done is exploring once",
            "author": "@khhnator",
            "like_count": 0,
            "published_at": "2024-07-03T16:52:12Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "7:05 People hate Java for the public static void main(String[] args) but they absolutely love the shitty syntax of Rust, man the nosense hate for Java is real",
            "author": "@s3rit661",
            "like_count": 0,
            "published_at": "2024-07-03T16:46:04Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "I've been coding in Java for 24 years, watching people chase the latest languages.",
            "author": "@OneFingerYT",
            "like_count": 138,
            "published_at": "2024-07-03T16:45:42Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Name me one reason why Python isn't the best ever at everything!! :P",
            "author": "@crashmaster26",
            "like_count": 0,
            "published_at": "2024-07-03T16:45:33Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "1. I don't see how if err != nil makes you think, because you just return nil, err. It is even more convenient than Rust really bc you generally have just one error type for the entire program.\n2. Async programming in Rust kinda sucks.\n3. At least the Reddit community is okay-ish. Leadership sucks. Crazy people are everywhere.\n4. Mongo actually sucks for most mainstream applications, can't blame these guys :) Maybe it's my own skill issue, but I find it easier to just use Postgres/SQLite depending on the project. Maybe some embedded key-value storage. Mongo have never ever solved any problem for me, it just added new ones.\n\nI agree that Rust is basically Haskell in a C-like cover with a nicer package manager. This does come with its own drawbacks e.g. the typing system is harder to understand and its syntax is super verbose. But come on, I've seen worse TS code with a single type definition in 20 lines. Apart from the rant about async and build times that I completely agree with (and I've been writing in Rust for commercial projects for several years now) the guy seems to have a massive skill issue or did not bother to properly understand the language.\n\nOn a side note, attending a good school doesn't necessarily make you a good engineer. I've seen people who can design crazy algorithmic stuff I would probably never be able to come up with. But they outsourced the actual implementation to software engineers with a vague understanding of the domain (good enough to understand their papers), because they were terrible software engineers and their code was usable as a reference implementation at best.",
            "author": "@lohmatiyy",
            "like_count": 0,
            "published_at": "2024-07-03T16:43:21Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I also spent about two months studying rust, but I figured out that it is not worth \"to put in the trash\" all my knowledge of C++, which I built over years, in  order to build apps that are supposed to be safer.",
            "author": "@desvendandoornasaude4127",
            "like_count": 0,
            "published_at": "2024-07-03T16:40:52Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"once you have runtime managed memory it's no longer fast\" isn't really true. Java can definitely outperform C++ and so can JavaScript, it's just often harder to do. Languages aren't fast or slow, they make it easier or harder to write fast code",
            "author": "@yx4292",
            "like_count": 0,
            "published_at": "2024-07-03T16:39:51Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "the weirdness with golang channels has mostly to do with the underlying implementation, doing it with err the way you'd prefer would hurt performance. you can always make your own wrapper to have the err if you prefer that, but you'd probably prefer not once you get around to it",
            "author": "@AqoCyrale",
            "like_count": 0,
            "published_at": "2024-07-03T16:38:16Z",
            "sentiment": "LABEL_1",
            "emotion": "disgust"
        },
        {
            "comment_text": "This is my article! Shameless plug to follow me if you liked it, hated it, agreed, or disagreed!",
            "author": "@StarksTech",
            "like_count": 1,
            "published_at": "2024-07-03T16:36:02Z",
            "sentiment": "LABEL_1",
            "emotion": "anger"
        },
        {
            "comment_text": "We need friendliness in tech communities, and  irl too. It makes everything easier",
            "author": "@antontsvil245",
            "like_count": 35,
            "published_at": "2024-07-03T16:33:21Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "The secret to success when learning a new language is embracing the idioms.",
            "author": "@7th_CAV_Trooper",
            "like_count": 2,
            "published_at": "2024-07-03T16:26:21Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "bro just used interface{} in the go example to not deal with any types, that is like throwing any everywhere in typescript and it does not help with your case man, this guy is so javascript brained",
            "author": "@foxwhite25",
            "like_count": 23,
            "published_at": "2024-07-03T16:23:57Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I think that if this author used Enums instead of traits and then have some macro for evaluating all variants, a lot of the problems wouldn't be as bad. That being said I don't know their exact use case and haven't done that much async.",
            "author": "@some1and297",
            "like_count": 3,
            "published_at": "2024-07-03T16:19:55Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "A couple things:\n- This isn't against Prime, I like his takes on these, but language/framework beatdown articles are just whiney engagement bait. This guy raised a few valid-ish points but he knew that the Rust community would flame him and react to the content and it would get attention. I'm not saying don't share articles because of that, just keep it in mind when you see them.\n- Re: algorithmic trading - You don't necessarily need millisecond response times with algo trading, that's mainly just high frequency trading. There is a subset of algo trading that trades much slower.\n- Rust error handling - Bubbling up errors _is absolutely_ a difficult problem to solve. I've got a big codebase I'm working in where I run into that all the time. It means your program is much less likely to crash, but it does make it hard to debug issues.\n- Async Rust - IMHO this is one of the larger flaws in Rust as a language. Syntax and more make async rust really difficult to do. I'm hoping that's something that gets fixed in the future, or at least that I lessen my skill issues.\n- Don't listen to trolls - 100% this, but I also like to target some of the trolls that are clearly constantly mad. Spin them up a bit more with over the top polite replies is fun.",
            "author": "@valhalla_dev",
            "like_count": 0,
            "published_at": "2024-07-03T16:10:36Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Web devs should not be allowed to complain about other programming languages.\n\nSincerely,\nA web dev",
            "author": "@RemizZ",
            "like_count": 272,
            "published_at": "2024-07-03T16:10:07Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "One of the huge balancing acts with Rust is when to write stuff yourself vs falling back on the community crates.\nIf you wanna GSD you just gotta use the classics - anyhow, thiserror, serde, tokio, etc. or you're gonna wind up with pin box, dyn error shenanigans.",
            "author": "@meatcow417",
            "like_count": 0,
            "published_at": "2024-07-03T16:04:35Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Where in hell is Zig having a unfriendly community?\nI had 3 people on official Zig discord help me debug my Raylib build and compilation.\nJavaScript community consists of so much soy and women, that I think they physically can't appear as threatening or unfriendly.",
            "author": "@RichardLofty",
            "like_count": 2,
            "published_at": "2024-07-03T16:03:19Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "I see Rust as largely a C replacement. C would not be my first language to build a trading platform with. It would be my first language to build an OS with.\nJust imagining writing a UI in Rust gives me nightmares.",
            "author": "@jshowao",
            "like_count": 13,
            "published_at": "2024-07-03T16:02:01Z",
            "sentiment": "LABEL_0",
            "emotion": "fear"
        },
        {
            "comment_text": "algorithm is not necessarily high frequency so slower languages might be fine",
            "author": "@cryptonative",
            "like_count": 0,
            "published_at": "2024-07-03T16:01:37Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"now that I know Rust\"",
            "author": "@liminal27",
            "like_count": 58,
            "published_at": "2024-07-03T16:01:24Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "You continuously mentions rust is great for CLIs but I feel cobra for go is better devex.",
            "author": "@narendrapatwardhan68",
            "like_count": 0,
            "published_at": "2024-07-03T16:00:42Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "10:00 >> The Frozen Throne",
            "author": "@user-jx5kf9zp8z",
            "like_count": 0,
            "published_at": "2024-07-03T16:00:04Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "IF GO WAS A WHORE ON ONLY FANS THIS GUY WOULD BE THE FIRST WHALE SIMP ... LOL",
            "author": "@user-lh3xs9km6z",
            "like_count": 0,
            "published_at": "2024-07-03T15:57:42Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Hol up hol up, this dude wrote an algorithmic trading platform in typescript?",
            "author": "@cellularmitosis2",
            "like_count": 0,
            "published_at": "2024-07-03T15:55:02Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "I 100% get where this guy is coming from with the answers received, it's always what's infuriated me most about programming. No other community does what they do here. \n\nImagine asking in a woodworking forum \"I'm building a canoe and the epoxy is giving me trouble can you give me advice on how to work it?\" and you get a dozen answers that are some variation of \"You're building a canoe? Are you an idiot? Build a deck instead you moron.\" You don't need a deck, you need tips on using epoxy, but everyone feels smugly justified with the non-answers they gave you. When you bring that up you get dog-piled on for having \"skill issues\".\n\nWho would ever want to be a part of that?",
            "author": "@GreedoShot",
            "like_count": 28,
            "published_at": "2024-07-03T15:53:21Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "The rust you want is called Scala",
            "author": "@ederolima",
            "like_count": 0,
            "published_at": "2024-07-03T15:53:00Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "bAhAHAHAHAHAHAH\nlol",
            "author": "@fuzzy-02",
            "like_count": 0,
            "published_at": "2024-07-03T15:44:51Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "Clearly I miss what Rust is \"trying to be\"... It's a language that ties you to the borrow checker, mutable references, all these hoops to jump through.... but then everyone says async stuff is an absolute nightmare?\nOwnership, lifetimes, preventing mutability outside of where it should happen, etc is incredibly easy to reason about outside if async world... Why would anyone want to use rust if it doesn't make async easier?",
            "author": "@Hazanko83",
            "like_count": 0,
            "published_at": "2024-07-03T15:40:20Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "My personal view on how nice the Rust community is: Reddit is the most toxic, but also an unofficial one. Discord has their share of toxic members (they increased their numbers after the remaining official teams moved to Zulip), overall very nice and friendly but you can end up ignored because of the amount of message traffic there. Zulip is the nicest and also the official one, I honestly never saw someone being toxic without consequences there.\n\nBesides the general community, on the Rust teams, there are around 2 or 3 members that are more prone to torvalds someone (yeah, I turned Linus into a verb), one of them sure did say quite unfair (to say the least) things to you. I did have very nice interactions with them before and I feel it is something like Linus Torvalds (heart in the right place, but can be very extra on particular occasions) and I hope they improve like Linus did in the past years.",
            "author": "@ericshimizukarbstein6885",
            "like_count": 9,
            "published_at": "2024-07-03T15:40:05Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I built a bunch of trading algos at one of the largest banks, doing trillions of dollars in volume annually. I can tell you that speed depends a lot on the market dynamics. For equities, you tend to require a lot of speed because the market data isn't throttled. For most markets, you can get away with even python in the trading logic layer.\n\nHaving said that, Rust is being looked at for the market data and execution layers in the tech stack. Pretty much anything trading infrastructure is a good fit because you do get the speed, safety, and great handling. Typically that has been dominated by C++ since forever.\n\nTo me, it sounds like the writer chose to do the entire system in Rust, which probably isn't the best. Writing to databases doesn't need to be bare metal speed. These days, I like the idea of using an easy language that I can trust to maintain great uptime metrics for basic server infrastructure like database writing, which Go would be a great choice.",
            "author": "@michaelhart8928",
            "like_count": 5,
            "published_at": "2024-07-03T15:39:14Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "feels like a 100% skill issue. The problem with rust, however, is that it's new and cryptic. That adds somewhat to the skill requirement, but that's not the problem here. I haven't written a single line of  rust, but can already 'get' what's going on. The problem is the lack of software architecture design experience.",
            "author": "@Raspredval1337",
            "like_count": 22,
            "published_at": "2024-07-03T15:33:56Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "15:27  Sure, it's a skill issue. But i would argue that the speed benefits of Rust for 99% of projects are not worth the time and energy investment to get really good at it. If you build compilers or other infrastructure that really needs that speed boost,  sure. But understand the enormous investment you're going to have to make to do it right. \nFor most everything else, Go is probably the right choice. Minimal loss of speed with a much, much better DX. \n\nThe biggest skill issue is knowing when to reach for the right tool for your particular context.",
            "author": "@nickmurdaugh9856",
            "like_count": 4,
            "published_at": "2024-07-03T15:33:03Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "26:10 I understand that shadowing seems useful when writing code... \nbut I don't get how is it not just evil, when you end up having to maintain someone else's code.\nA variable changing type/meaning in the middle of a code block seems like an awful idea for code readability, maintainability. It's misleading, harder to understand and probably more error prone.",
            "author": "@szirsp",
            "like_count": 4,
            "published_at": "2024-07-03T15:25:23Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "24:04 The code you want is: \nConst idx = std.mem.indexOf(...) orelse return null;",
            "author": "@bjbboy71697",
            "like_count": 0,
            "published_at": "2024-07-03T15:24:24Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "unless you program rust every day, your forget speed is 10x that of learning speed",
            "author": "@notarealperson9709",
            "like_count": 2,
            "published_at": "2024-07-03T15:23:15Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Couldn't he just use a BoxFuture<'_, Result<R, String>> instead?",
            "author": "@kulikgabor7624",
            "like_count": 0,
            "published_at": "2024-07-03T15:20:00Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"6 min read\" 38 min video",
            "author": "@zZMysteriousGamerZz",
            "like_count": 0,
            "published_at": "2024-07-03T15:16:54Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Yeah no I agree- Rust- I can see it's decently good- however I will *NOT* use rust any time of the day.\nZig is definitely superior.",
            "author": "@anG_3L404",
            "like_count": 1,
            "published_at": "2024-07-03T15:15:52Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "You can always fix an abstraction by undoing it.  You can never fix code duplication because it will always accidentally diverge.",
            "author": "@bobbycrosby9765",
            "like_count": 1,
            "published_at": "2024-07-03T15:14:16Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "that “rust is haskell dressed as C” imo is very wrong, when getting into crazy types like that, Rust is MUCH more difficult and unintuitive, if you think you can extract a closure into a function with parameters you encounter problems, if you try to do the opposite you also do, and as “friendly errors”, still they are considerably difficult. In haskell you are much more free to do that sort of stuff.",
            "author": "@rogergalindo7318",
            "like_count": 21,
            "published_at": "2024-07-03T15:11:30Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Legit question, why do you think the Zig community is the worst? I have little experience with Zig and it's community, so I'm genuinely curious.",
            "author": "@Saru-Dono",
            "like_count": 3,
            "published_at": "2024-07-03T15:09:14Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "37:35 forget about FPGAs and code... They are literally putting data centers in building NEXT TO THE EXCHANGE to minimize the delay.\nThis is insane.",
            "author": "@anj000",
            "like_count": 17,
            "published_at": "2024-07-03T15:09:06Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Hope that links go through https://www.reddit.com/r/rust/comments/1dq9vb1/comment/lan14bx/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button\nI recommend giving it a read, that pretty much sums up this useless blog post",
            "author": "@mateuszschyboll2310",
            "like_count": 0,
            "published_at": "2024-07-03T15:09:05Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "You're wrong about C++. UBs, OOP model, idiotic defaults and the lack of compiler checks make programming in C++ miserable: not because I don't like it or have skill issues, but because each one of them results in critical bugs that take weeks to debug and fix. It's simply a waste of time.\nRust may have other problems, but at least it doesn't have these ones, not counting the QoL improvements. C++ is stuck in the 1990s and isn't improving where it matters, we need better tools, and anything at this point is better than C++.",
            "author": "@theultimateevil3430",
            "like_count": 1,
            "published_at": "2024-07-03T15:06:15Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "The sheer irony of Prime claiming skill issues on the part of the article's author and then totally not understanding the reasoning for Go's channel semantics that he can barely even remember but can claim don't make sense...",
            "author": "@deedlefake",
            "like_count": 9,
            "published_at": "2024-07-03T15:04:07Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "Rust backtraces only apply to panics. He's talking about how a function returning Result::Err doesn't convey information about where it was constructed. You only know where it was handled, not where it originated.",
            "author": "@dork_side",
            "like_count": 15,
            "published_at": "2024-07-03T15:01:11Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "If you can afford to use a GC why are you using rust? If you can't use a GC, you need to make sure all these weird semantics are satisfied anyway. The fact that C/C++ doesn't check `Send` and lets you pass a glcontext between threads doesn't mean it will work.\nYou can see from their Go code that they don't understand the concept errors as values since that code doesn't add context to any of the errors it passes back even though it should.",
            "author": "@FicoosBangaly",
            "like_count": 0,
            "published_at": "2024-07-03T15:01:06Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I just always use .expect() while I build something, so it panics. Then when I am certain that I’m done with the module I start building error types.",
            "author": "@MaryTheTankGirl",
            "like_count": 0,
            "published_at": "2024-07-03T15:00:56Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "17:17 you usually wouldn't be able to just simply slap a question mark on some Result, most of the time you need to change the return type of the function or implement a From<SomeError> for your custom error. So you do need to think about the error a little bit, at least acknowledge what the error is.",
            "author": "@sucss3358",
            "like_count": 2,
            "published_at": "2024-07-03T14:57:49Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust can be simple. For example, you probably don’t need generics or lifetimes for your use case. Your application is not a library and so it’s ok to be ad hoc and repeat yourself.",
            "author": "@taylorallred6208",
            "like_count": 261,
            "published_at": "2024-07-03T14:55:37Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"Crypto mining is so inefficient and bad for the environment\" - Some HFT bank burning 100,000 kWH so they can short GameStop faster",
            "author": "@owlmostdead9492",
            "like_count": 0,
            "published_at": "2024-07-03T14:48:00Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I don't want to manage my own memory. Been there, done that, not going back. I don't need it, and I don't want to waste time with it (or debug it). Zig if you're watching, at least give me ARC. Minding cycles is more fun than minding every heap allocation ever. Disclaimer: I did not try Rust.",
            "author": "@someman7",
            "like_count": 0,
            "published_at": "2024-07-03T14:47:45Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "can we talk about Cpps async",
            "author": "@MaryTheTankGirl",
            "like_count": 1,
            "published_at": "2024-07-03T14:47:38Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "the code example's only _problem_ was the return types and stuff\nliterally every thing that came after, ill take the rust code over the go code",
            "author": "@RenderingUser",
            "like_count": 2,
            "published_at": "2024-07-03T14:44:14Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "There’s a retarded campaign in guvment work that there is so many memory vulnerabilities…",
            "author": "@doesthingswithcomputers",
            "like_count": 0,
            "published_at": "2024-07-03T14:43:48Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I'm coming from a different language background and if I hear skill issue, than that seems wrong to me, after your explanations what you mean. Skill issue to me sound like he doesn't have the proper skills to learn the language. But what I get from your explanations is: It is a knowledge issue, he hasn't learned how to use the language yet, but he can still have the skills to learn it and get a great programmer in Rust.",
            "author": "@livinghypocrite5289",
            "like_count": 3,
            "published_at": "2024-07-03T14:43:12Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I feel like performance when u get to HYPER optimized enviorments. Becomes much more dependent on compiler quality. \n\nIf ur compiling to wasm even without gc ir fucking screwed. Like its a 30% perf drop... \n\nIf u fuck up memory alignment that's another 10%~ \n\nThe OS also matters a lot. If ur IO bound the languge kinda does not matter its just up to the OS\n\nIf ur on that top edge of performance that's memory/compute bound. I don't get why rust. \n\nC++ has the best libraries and compiler support. U probably can find the best implementation for it. \n\nC makes nice readable assembly that let's u figure shit out. \n\nRust... I don't get rust. I get fortran better and Heck it's memory safe for fortran 77",
            "author": "@nevokrien95",
            "like_count": 0,
            "published_at": "2024-07-03T14:42:29Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "I needed to make a CLI program for my company that covered quite a few data processing and report generation bases that was fast for invocation on servers. Of the selection of native-compiled languages, I went on a tour. The guy before me had already worked on a prototype in Rust. I tried to continue working on it. I went from positive on Rust to wanting to die QUICK. Eventually I settled on Nim. Remaking the program was EASY. New features are EASY. Refactoring is EASY. I ROCKETED past the old featureset the company had languished in for 20 years. I have never before worked in a language that has made my life this damn easy while producing executables with a speed that'll knock your socks off. I experimented with D back in the day and it never got CLOSE to Nim. My job is a JOY because of this damn language and I never want to go back. My rule of thumb: If you're not embedded, you can probably let a GC/RC do the hard work for you, and scoop up the advantage of not needing to write a line of memory code ever.",
            "author": "@nERVEcenter117",
            "like_count": 30,
            "published_at": "2024-07-03T14:41:10Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Personally I believe that boiling people's problems with a language down to a \"skill issue\" is kind of dumb. Every problem you can have is a skill issue. If the language is Turing complete then you can do everything in it (technically). You have a problem with your error handling? Skill issue. If you were a better programmer there would be no errors to handle and why would you need to handle what doesn't exist? A ridiculously steep learning curve is a giant glaring con for a language. If you have to \"git gud\" for years on end to be able to write some decent code in a language then is it even a language worth learning?",
            "author": "@Telhias",
            "like_count": 32,
            "published_at": "2024-07-03T14:39:06Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Skill issue I agree. That being said, when the language is as arcane and difficult as Rust, it certainly has to take some of the blame. \n\nI say this being a strong advocate of rust, having written it for 4 1/2 years and counting.",
            "author": "@scheimong",
            "like_count": 8,
            "published_at": "2024-07-03T14:34:57Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I spent the last 18 days doing Rust and so far I love it! Also speed for these binary compiled languages is compiler diff and CPU ISA, none of these is inherently faster.",
            "author": "@Kiyuja",
            "like_count": 0,
            "published_at": "2024-07-03T14:33:40Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "What? Simplicity and maintainability are important???????? Because we read more code then write....",
            "author": "@zachend2750",
            "like_count": 0,
            "published_at": "2024-07-03T14:32:19Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Fast? You want fast?\nFortran\n\nYou want something fast with thousands of connections doing huge batch jobs at the same time?\nCobol\n\nthe rest is just fluffy fluff.",
            "author": "@methanbreather",
            "like_count": 0,
            "published_at": "2024-07-03T14:30:59Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "I think that once you understand what the different pointer types in Rust do and you know the reason for their necessity it gets much easier to read the types because you're not that lost anymore.\nStep by step its really easy actually.\nFnMut is a function that can mutate some state inside itself. It takes an argument that is a mutable reference to the ClientSession.\nand returns a pinned value.\nPin just says that the value with type F cannot be moved to another memory location. This is to ensure that from one thread to another the memory location always stays the same.\nBox just say's that whatever is inside the <> lives on the heap.\ndyn says that you can use the api that the trait Future provides.\nFuture is a pollable object that waits for some asynchronous operation to be completed, the <Output=...>  of which is just a Result that can either be of the type R which must be Sendable across thread boundaries and have a 'static lifetime which means that the value lives for the entire lifetime of the application, think a string thats embedded in the executable. And then the Result can also be an error in which case it is a String that probably tells the caller of the function something about what went wrong.\n\nYou really have to break these concepts down and try to understand them bit by bit. At which point you really do get faster at reading and understanding these types. You also learn what you need to skip and exclude from your mental stack so to speak if you only want to know what the function does and not why it is technically necessary to do all the pinning and fnmutting business.",
            "author": "@lorenzvo5284",
            "like_count": 82,
            "published_at": "2024-07-03T14:30:03Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"PHP has the nicest community\" === \"we're all in this shit together\"",
            "author": "@ThePOVKitchen",
            "like_count": 1411,
            "published_at": "2024-07-03T14:28:19Z",
            "sentiment": "LABEL_2",
            "emotion": "disgust"
        },
        {
            "comment_text": "I unironically got a massive migraine reading and trying to write a simple cli argument parser in rust, that has never happened - not even when going from C# to C++ to C to Python to php to javascript\n\nNot once, but doing rust gave me a full migraine where I just cant go near the computer, its insane",
            "author": "@uuu12343",
            "like_count": 14,
            "published_at": "2024-07-03T14:26:54Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "“I’m cool”\nAsync: “no, you’re not”",
            "author": "@johnyepthomi892",
            "like_count": 1,
            "published_at": "2024-07-03T14:17:29Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "If you have very complicated types you can do fn foo(a: impl TraitA) -> impl TraitB {T }, where T satisfies the trait",
            "author": "@sortof3337",
            "like_count": 0,
            "published_at": "2024-07-03T14:15:42Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust is awesome.",
            "author": "@fabiopetrillo",
            "like_count": 2,
            "published_at": "2024-07-03T14:15:02Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "SKILL ISSUE.\ni rewrote lot of our telco stack in rust. I also have huge regrets, not using it earlier.",
            "author": "@sortof3337",
            "like_count": 21,
            "published_at": "2024-07-03T14:13:50Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "A guy coming from TypeScript... to Rust? A guy who wants to port a large trading platform... written in what is essentially a JavaScript front... to Rust? That alone already tells me either huge mistakes were already made, or huge mistakes are about to be made.\n\nI'd also say the probability of that person having the background and mindset to use a language like Rust properly just isn't there. If you're used to scripting languages, and bringing along idioms from that environment, you just won't do well with either C++ or Rust.\n\nI could of course be completely wrong about this. Maybe the guy has experience in other environments. This would be my first guess though.",
            "author": "@a5cent",
            "like_count": 0,
            "published_at": "2024-07-03T14:13:48Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust channels are actually amazing. Including several types of channels like oneshot etc. The tokio docs are great on it as well.",
            "author": "@TheNoirKamui",
            "like_count": 6,
            "published_at": "2024-07-03T14:13:47Z",
            "sentiment": "LABEL_2",
            "emotion": "surprise"
        },
        {
            "comment_text": "You know i used to hate when people would say \"skill issue\". But, you all just actually suck at Rust and then get mad at the language when you try to fight against it",
            "author": "@christopher8641",
            "like_count": 0,
            "published_at": "2024-07-03T14:13:18Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "I don't understand why everyone just HAVE to write async code either. It doesn't make sense to use coroutines for like 95% of all problems if not 99% (not exaggerating).\n\nWhy not just do it normal and multi threaded? It is NOT that hard. It is only coroutines that make it hard! STOP USING COROUTINES. You are NOT getting a performance benefit out of it.",
            "author": "@simonfarre4907",
            "like_count": 18,
            "published_at": "2024-07-03T14:10:45Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "The biggest annoyance with rust is everything I need to use rust for needs a dependency thats just a rust wrapper of some C primitave library.\n\nStart rebuilding the libs and I'll come back to it",
            "author": "@arimill1045",
            "like_count": 5,
            "published_at": "2024-07-03T14:06:12Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "It's kinda weird seeing nuanced and reasonable takes.. but I do appreciate that! ❤",
            "author": "@qwfp",
            "like_count": 0,
            "published_at": "2024-07-03T14:06:06Z",
            "sentiment": "LABEL_2",
            "emotion": "disgust"
        },
        {
            "comment_text": "The article where a game dev reviews Rust after using it for 3 years is much better, though maybe too long for Prime to react on stream.",
            "author": "@pyrocentury",
            "like_count": 64,
            "published_at": "2024-07-03T14:06:05Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Maximum performance _and_ async is extremely hard in any language",
            "author": "@pashadia",
            "like_count": 454,
            "published_at": "2024-07-03T14:05:36Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "This criticism is coming from a TypeScript programmer. I think that speaks for itself.",
            "author": "@Bobbias",
            "like_count": 1,
            "published_at": "2024-07-03T14:03:21Z",
            "sentiment": "LABEL_1",
            "emotion": "disgust"
        },
        {
            "comment_text": "I think this guy has bigger problems than learning Rust... just based on the title\n- Someone who's tried to build multiple algorithmic trading bots",
            "author": "@beans2939",
            "like_count": 6,
            "published_at": "2024-07-03T14:03:05Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust community is pure cancer. I was repeatedly told to use rust only offline including the docs, lol. It is especially ridiculous because the few cult members that actually enjoy being there genuinely think that it is a \"welcoming\" and \"diverse\" community, lol",
            "author": "@TheNoirKamui",
            "like_count": 0,
            "published_at": "2024-07-03T13:59:37Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Assembly is faster\nBoolean is even faster\nRewiring and reprogramming the PC is the fatest",
            "author": "@PedroIvoVH",
            "like_count": 4,
            "published_at": "2024-07-03T13:57:58Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "In terms of higher than C++11, anything bigger than 11 has all the baggage of everything 11 and before.\nThere's a lot of artifact foot guns built in to the reverse compatibility.\n\nThe one horrible/great thing that came after Java 8 was that they were willing to just kill the unsafe functions and force people to update or stay in the old unsafe version.",
            "author": "@jagagemo8141",
            "like_count": 43,
            "published_at": "2024-07-03T13:50:21Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Rust has the same weakness as any language without garbage collection... they're blazing fast in the right hands... but there's only like 3 people in the world with the right hands... the rest broke their hands punching the monitor when they got angry at those languages",
            "author": "@LoFiAxolotl",
            "like_count": 17,
            "published_at": "2024-07-03T13:50:16Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "fasterthanlime is a great example of a jerk rust dev.",
            "author": "@aaksola",
            "like_count": 0,
            "published_at": "2024-07-03T13:49:52Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust (mostly the community ) is making the  Ada language so attractive",
            "author": "@dvhh",
            "like_count": 1,
            "published_at": "2024-07-03T13:49:21Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Algorithmic trading != HFT (high frequency trading). HFT uses algo trading, but you can trade slow with algorithms as well (and is done with virtually all institutional trade orders).",
            "author": "@AlexanderHyll",
            "like_count": 7,
            "published_at": "2024-07-03T13:45:03Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "This idiot just rewrote his lines of Typescript code into almost the same Rust code, instead of rewriting his application in Rust.",
            "author": "@avwie132",
            "like_count": 0,
            "published_at": "2024-07-03T13:44:48Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "It all suddenly went downhill once the biden whitehouse mandated programmers to use it.",
            "author": "@kokoinmars",
            "like_count": 0,
            "published_at": "2024-07-03T13:44:03Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "thats why in my company we just Arc everything, Arc<dyn , Arc<Mutex<, Arcs all the way, at least for us that shiet is not worth it",
            "author": "@levizin917",
            "like_count": 2,
            "published_at": "2024-07-03T13:42:58Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Hate me all you want but Java really sits in the middle of all of this and offers a sweet spot",
            "author": "@wilfred-almeida",
            "like_count": 0,
            "published_at": "2024-07-03T13:40:04Z",
            "sentiment": "LABEL_1",
            "emotion": "anger"
        },
        {
            "comment_text": "Checked exceptions in Java are great",
            "author": "@yatsuk",
            "like_count": 1,
            "published_at": "2024-07-03T13:37:28Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I like how almost everyone that call rust userbase \"cultists\" have a cultist way of talking and thinking about things.",
            "author": "@diadetediotedio6918",
            "like_count": 43,
            "published_at": "2024-07-03T13:36:24Z",
            "sentiment": "LABEL_1",
            "emotion": "joy"
        },
        {
            "comment_text": "That \"orelse return null\" gives me Perl vibes.",
            "author": "@trapexit",
            "like_count": 4,
            "published_at": "2024-07-03T13:36:11Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "OCaml to the rescue!",
            "author": "@alskidan",
            "like_count": 1,
            "published_at": "2024-07-03T13:34:56Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"Magick always comes at a price\"\n - Gaius to Merlin",
            "author": "@RogerValor",
            "like_count": 75,
            "published_at": "2024-07-03T13:33:09Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "You don't need to handle errors respectively when you're building backend applications.\nWhat you need is, instead, reporting and monitoring errors and using database transactions.\nBackend apps and client apps or middleware are fundamentally different animal when it comes to error handling.",
            "author": "@ANONAAAAAAAAA",
            "like_count": 1,
            "published_at": "2024-07-03T13:29:21Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust is easy, you just have to use it both at work and personal projects for 5+ years without polluting your mind with any other language.",
            "author": "@MartynasNegreckis",
            "like_count": 56,
            "published_at": "2024-07-03T13:23:48Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Going out of the \"GC world\" into a wild universe of self-managed memory can be akin to learning to breathe manually. Rust attempts to solve that issue by stunning you with a cattle prod every time you fail to take a breath on time (or take a breath when you weren't supposed to). This works for some people, but not for everyone and not in every situation. In its defense: it's not like there are no warnings about it... like, at least half the articles I've read on Rust before giving it a try were very explicit about how hard and frustrating it can be.",
            "author": "@arcuscerebellumus8797",
            "like_count": 182,
            "published_at": "2024-07-03T13:23:44Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"Doctor! Doctor! It hurts when I do this!\"",
            "author": "@orterves",
            "like_count": 12,
            "published_at": "2024-07-03T13:22:15Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Rust is the ultimate skill issue language where you can't write a correct program in c/c++ you go crying in rust....",
            "author": "@amj864",
            "like_count": 6,
            "published_at": "2024-07-03T13:20:26Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "Why is rust suddenly now the \"new thing\" i hear people bring up? Not on this chan, but in general its like ruby on rails was. People be like \"YOU DONT USE ruby on rails?\"... with a smug style. Serious question, because isnt it limited in scope of what its used for?",
            "author": "@FromRootsToRadicals_INTP",
            "like_count": 2,
            "published_at": "2024-07-03T13:18:57Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "You point about question mark isn't quite right because you still need to specify the type of error your function will return.",
            "author": "@jonnyso1",
            "like_count": 1,
            "published_at": "2024-07-03T13:18:17Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"If you don't have access to an LLM...\" So he used ChatGPT to convert TypeScript to Rust?",
            "author": "@blackt0wer",
            "like_count": 187,
            "published_at": "2024-07-03T13:16:00Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Have you tried to extract into function code that accepts an iterator? You have to Box<dyn Iterator<Item = _>> just to have it separate. I understand that it does not have a static size etc etc, but at the end it's just so verbose that you don't want to extract that into a function anymore.",
            "author": "@ivanjermakov",
            "like_count": 1,
            "published_at": "2024-07-03T13:14:42Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "It's sad they are leaving the rust community, they would fit right in",
            "author": "@gusvanwes6192",
            "like_count": 0,
            "published_at": "2024-07-03T13:14:07Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "People need to understand the market segments rust is appealing to, mainly systems programmers… if he wanted a performant, compiled, garbage collected language he should have just used go. But he fell for the RIR meme and then wrote an article about “if only rust had a garbage collector”, which for me is the same as “I’m so mad my car isn’t also a boat”… it’s a different product for a different market segment …",
            "author": "@chockman3833",
            "like_count": 460,
            "published_at": "2024-07-03T13:13:36Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "Rc<> is precisely the right approach for objects that might need to have their lifecycle extended by multiple 'owning' references; Arc<> applies when the 'owning' references might span separate threads. Cell<> and RefCell<> are for shared mutable state within a single thread, whereas Mutex<> and Rwlock<> serialize concurrent access from multiple threads. To reiterate, these are not clumsy \"band-aids\" or \"hacks\"; they're elegant, self-contained solutions to rather well-defined resource management problems.",
            "author": "@khronos142",
            "like_count": 0,
            "published_at": "2024-07-03T13:13:28Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "I thought Fortran is pretty fast",
            "author": "@eliasmai6170",
            "like_count": 2,
            "published_at": "2024-07-03T13:13:17Z",
            "sentiment": "LABEL_2",
            "emotion": "surprise"
        },
        {
            "comment_text": "in Zig shadowing is crazy good once you understand the \"orelse return null;\" semantic, it makes for really concise and expressive code",
            "author": "@pierreollivier1",
            "like_count": 0,
            "published_at": "2024-07-03T13:13:07Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Skill issues.",
            "author": "@mo_dev2",
            "like_count": 0,
            "published_at": "2024-07-03T13:12:42Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "my outtake from 7:00 is that rust is good while it looks like Ocaml or any other functional language",
            "author": "@johnbakhmat",
            "like_count": 2,
            "published_at": "2024-07-03T13:12:26Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "When will people learn C",
            "author": "@pidojaspdpaidipashdisao572",
            "like_count": 1,
            "published_at": "2024-07-03T13:11:52Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "You have the body of Luigi but the face of Mario. Are you the Cousin of Dolly? made on order, but rejected from Nintendo?",
            "author": "@StarDollar",
            "like_count": 0,
            "published_at": "2024-07-03T13:09:41Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "Haskell doesn’t have this problem, it has a much nicer async experience relative to Rust but there is a learning curve to doing functional concurrency - this I don’t disagree with",
            "author": "@calvinfernandes1054",
            "like_count": 15,
            "published_at": "2024-07-03T13:07:52Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "ppl just wanna write stupid code slinging n winging",
            "author": "@Zuranthus",
            "like_count": 0,
            "published_at": "2024-07-03T13:07:33Z",
            "sentiment": "LABEL_0",
            "emotion": "anger"
        },
        {
            "comment_text": "After a session of Rust, I literally feel nauseous when I switch to Typescript because the error handling is so good in Rust.",
            "author": "@stuvius",
            "like_count": 174,
            "published_at": "2024-07-03T13:07:06Z",
            "sentiment": "LABEL_2",
            "emotion": "fear"
        },
        {
            "comment_text": "Rust is like communism. It's not flawed, you are just doing it wrong",
            "author": "@pukkandan",
            "like_count": 17,
            "published_at": "2024-07-03T13:03:12Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust is probably an overkill for the vast majority of use cases. Rust may be great, but people have to realise it's not always the best choice. At some point I decided I will learn it (to an extent) and indeed found the language syntax/lingo very frustrating. But, what I found to be very irritating is that Rust kind of became a religion and there are way too many zealots around. At the same time, the short time I spent with Rust was actually funny. I found the language so awkward (like if it was intentionally made that way) that I rather implemented things using unsafe and inline assembly, because it was easier to implement and understand and said \"I'll rustify it later\". :D",
            "author": "@Keymandll",
            "like_count": 6,
            "published_at": "2024-07-03T13:02:30Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "\"Can't compile...\", \"I have no idea where my errors are coming from...\", etc etc. These red flag have \"skill issue\" written all over them. There are so may ways to handle errors, and there's only one in which you would arrive to this bad ending - not doing error handling at all. Simply slapping `thiserror` and `anyhow` would have made it a non-issue in an hour or two. If you can't pick up any good stuff that so many love this language for, in 18 months, it's not your case being special, but it is you instead <3. Not learning -> writing bad code -> blaming the language... We all know where this goes bros.",
            "author": "@corejake",
            "like_count": 13,
            "published_at": "2024-07-03T13:02:27Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "that rust code is flex",
            "author": "@phedwin",
            "like_count": 0,
            "published_at": "2024-07-03T13:01:39Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust fanboys are the new vegans.",
            "author": "@aniketbisht2823",
            "like_count": 11,
            "published_at": "2024-07-03T13:01:39Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "err != nill",
            "author": "@MrDejvidkit",
            "like_count": 0,
            "published_at": "2024-07-03T12:56:52Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Now draw a “basketball court”",
            "author": "@raidensama1511",
            "like_count": 0,
            "published_at": "2024-07-03T12:56:36Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I have just barely started watching.  The author already invalidated his opinion up front by actually picking to use Typescript previously.   \n\nLet's see how it goes....",
            "author": "@yayinternets",
            "like_count": 1,
            "published_at": "2024-07-03T12:55:43Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Something to add that really sheds some light on the article, the author admitted on Reddit that they used ChatGPT to help write some of their code, as they were quite inexperienced with Rust. So yeah, a big chunk of this is almost certainly skill issue on their part. https://np.reddit.com/r/rust/comments/1dq9vb1/comment/lan1ale/",
            "author": "@jcm2606",
            "like_count": 0,
            "published_at": "2024-07-03T12:55:32Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Does anyone have a link to that article or lecture on asserts?",
            "author": "@tymonm6740",
            "like_count": 2,
            "published_at": "2024-07-03T12:54:55Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Hay ant no way the rust community isnt nice , my experience so far is wholesome never seen someone act high and mighty when i ask question. Dude didnt even give a proof",
            "author": "@lMINERl",
            "like_count": 0,
            "published_at": "2024-07-03T12:54:49Z",
            "sentiment": "LABEL_0",
            "emotion": "joy"
        },
        {
            "comment_text": "I bailed from Rust when the async stuff was getting finalised… yuck",
            "author": "@jack-d2e6i",
            "like_count": 0,
            "published_at": "2024-07-03T12:53:18Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "if only rust syntaxs are informatif, ie we can know what is it just by reading the name, rust will be very popular and widely used by every level of devs",
            "author": "@Fuji-gn9nx",
            "like_count": 0,
            "published_at": "2024-07-03T12:52:55Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust community is following the path of Arch Linux community in overhyping a good thing and suggesting it for everything.\nThis inevitably becomes a problem because although these are for their particular purpose and end up becoming \"just a meme\".\n\nBy trying to popularize something, they end up making it infamous in the long run.",
            "author": "@ShrirajHegde",
            "like_count": 4,
            "published_at": "2024-07-03T12:51:52Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Oh yeah the question mark is def EVIL. but also why is he littering eprints everywhere just use a error library so you get your detailed errors..... \ncolor-eyre is my favorite. also using prints seems odd me just like have a proper logging library like pretty_env_logger. like i guess i kinda see rust as like a build your own language like thing one of the reasons i always laugh if people say rust has no boiler plate. because at least most of the stuff i build there's like 5 required crates and like 20 lines of a setup \nfor like what i see as the basic things any like non goof around program needs\nLogging\nStack trace/error handling \nEnvconfig ( for easy making of docker containers and also so you don't act like a idiot and bake api keys into code )\nserde (for json and other data type conversions )\ntokio (async threading etc)",
            "author": "@emeraldbonsai",
            "like_count": 0,
            "published_at": "2024-07-03T12:48:30Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "\"There is no other programming community that's as cult-like as Rust\" wait till this guy heard about Vlang...",
            "author": "@zahklam2",
            "like_count": 155,
            "published_at": "2024-07-03T12:48:23Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "And there are people claiming that \"if you write something in Rust, it will have no bugs!\" 🤯",
            "author": "@farzadmf",
            "like_count": 10,
            "published_at": "2024-07-03T12:48:02Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Snake 🐍 at the bottom of pyramid reporting for duty",
            "author": "@dougmercer",
            "like_count": 127,
            "published_at": "2024-07-03T12:45:55Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Java is faster !",
            "author": "@MrDejvidkit",
            "like_count": 0,
            "published_at": "2024-07-03T12:45:27Z",
            "sentiment": "LABEL_2",
            "emotion": "surprise"
        },
        {
            "comment_text": "This dude posted the article in the rust subreddit, he was blasted into oblivion for being a clueless idiot. He's still a clueless idiot.",
            "author": "@RomGrk",
            "like_count": 0,
            "published_at": "2024-07-03T12:45:14Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "Fun Fact: Every human has skill issues.\n\nTherefore pointing to skill issues, because programming language is not optimally designed makes no sense. Sometimes, the skill issue is not the actual problem.",
            "author": "@thingsiplay",
            "like_count": 19,
            "published_at": "2024-07-03T12:42:53Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "Just spent a weekend playing with Rust again. What I don't hear people talking about in these language wars is the difference in how working with http feels. We all have to do it for one thing or another at some point, but I find that making http requests and processing their responses in Rust is about 10x more complicated than the exact same requests in Go and about 5x more than JS or Python. I understand if you need to do some low-level wizardry to make your requests blazingly fast. If that's your use case, feel free to read an entire book about async and play around. Don't expect it to be easy though. Personally, I mostly just make and process web requests that don't have extreme time constraints and render simple widgets. Therefore, I find that I don't usually need Rust. I can write comfortably without abusing myself with unnecessary layers of complexity. There's been some push at my job to learn more about it since the Microsoft ecosystem is pushing hard on it, but thankfully it hasn't been proposed for any projects yet. I'll deeply question the reasoning if and when it does.",
            "author": "@andythedishwasher1117",
            "like_count": 3,
            "published_at": "2024-07-03T12:37:42Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Rust sounds awesome on paper. Half-way through learning it I just quit out of frustration, even though I have an C and python background. I understand the concepts it's forcing on the user, but all that boilerplate to do simple things just doesn't do it for me. And subjectively the syntax is awful. Like damn dudes readability should be high up in your priority list. That's how a language propagates and builds an user base.",
            "author": "@realms4219",
            "like_count": 11,
            "published_at": "2024-07-03T12:37:33Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "I spent 18 months rebuilding my house using a Swiss army knife. I'm filled with regret.",
            "author": "@DonAlonzo",
            "like_count": 609,
            "published_at": "2024-07-03T12:35:37Z",
            "sentiment": "LABEL_0",
            "emotion": "sadness"
        },
        {
            "comment_text": "I don’t get why Prime always brings up Arc and mutex in rust slowing things down. They are required to handle mutable shared memory in any concurrent application. Is mutual exclusion and atomic faster in C/zig and C++, or is he just forgetting that those languages slow down too and if you can you should avoid/mitigate mutual exclusion and atomic as much as possible?",
            "author": "@Thorhian",
            "like_count": 6,
            "published_at": "2024-07-03T12:33:32Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "anytime someone says \"try to do something clever\" we should all have a red flag.",
            "author": "@stanrock8015",
            "like_count": 8,
            "published_at": "2024-07-03T12:33:02Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "from my experience, Rust is pretty good for optimizing  existing program or workflow but it is surely damn hell on earth on creating something new \"fast\" on schedule rather than on the machine.",
            "author": "@rebel1324",
            "like_count": 0,
            "published_at": "2024-07-03T12:32:50Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "i keep hearing all this talk about how hard rust async is but it really confuses me like i've yet to actually program anything synchronous in rust other then helloworld Otherwise all my rust code has been async no issues i actually quite like it and easy threading is sweet 2. Though maybe its because rust wasn't my first Async language i used to be a nodejs programmer during the async dark ages where there was like 5 different ways to do async/promises and there was no standards. so i guess i wonder if the curve is rust async or just the concept of learning async in the first place.",
            "author": "@emeraldbonsai",
            "like_count": 1,
            "published_at": "2024-07-03T12:32:44Z",
            "sentiment": "LABEL_1",
            "emotion": "surprise"
        },
        {
            "comment_text": "I feel like the fact that apparently their first version was written in TS of all things isn't really a good sign. Makes you wonder what exactly they're comparing it to.",
            "author": "@hannessteffenhagen61",
            "like_count": 158,
            "published_at": "2024-07-03T12:32:25Z",
            "sentiment": "LABEL_0",
            "emotion": "surprise"
        },
        {
            "comment_text": "Rust has more videos on YouTube than actual lines of code working in production",
            "author": "@Z3rgatul",
            "like_count": 1363,
            "published_at": "2024-07-03T12:30:43Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "“Just give me the garbage collector” perfectly sums up how uninformed this man was before choosing Rust. People choose Rust for performance and security because their difficult compiler forces you to write secure code while still granting the flexibility to be fast.\n\nThis article 100% reads as I didn’t understand the idioms of the language I chose to work in and it’s Rust’s fault not mine.",
            "author": "@houstonbova3136",
            "like_count": 115,
            "published_at": "2024-07-03T12:29:17Z",
            "sentiment": "LABEL_0",
            "emotion": "neutral"
        },
        {
            "comment_text": "22:44 teej mentioned",
            "author": "@teej_dv",
            "like_count": 116,
            "published_at": "2024-07-03T12:27:37Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Where is Swift in that pyramid?",
            "author": "@yatsuk",
            "like_count": 1,
            "published_at": "2024-07-03T12:26:40Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Some positive and inspiring Zig hype is what I need right now :p",
            "author": "@ArtoPekkanen",
            "like_count": 3,
            "published_at": "2024-07-03T12:26:38Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        },
        {
            "comment_text": "Can you do a video on what you currently think about GO? Are you still using it? Did you ditch it after not liking it? Curious..",
            "author": "@GrantDoyle-n4e",
            "like_count": 6,
            "published_at": "2024-07-03T12:26:05Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I read it earlier and I wished to see your reaction 😊",
            "author": "@PasquiDente",
            "like_count": 0,
            "published_at": "2024-07-03T12:23:34Z",
            "sentiment": "LABEL_2",
            "emotion": "sadness"
        },
        {
            "comment_text": "Dude I'm getting so sick of the question \"Did you use ChatGPT to help write that?\". NO. NO I DID NOT. DO YOU NEED MORE CAPITAL LETTERS TO CONFIRM THIS FOR YOU?",
            "author": "@andythedishwasher1117",
            "like_count": 0,
            "published_at": "2024-07-03T12:21:47Z",
            "sentiment": "LABEL_0",
            "emotion": "disgust"
        },
        {
            "comment_text": "U s e.. i t..",
            "author": "@ahmadjames151",
            "like_count": 2,
            "published_at": "2024-07-03T12:17:44Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "Snake 🐍 and big yellow square 😂🤣😂",
            "author": "@abrarshaikh2254",
            "like_count": 16,
            "published_at": "2024-07-03T12:15:45Z",
            "sentiment": "LABEL_1",
            "emotion": "neutral"
        },
        {
            "comment_text": "I love how \"using Rust\" and \"rebuilding a huge platform\" are synonymous",
            "author": "@Oler-yx7xj",
            "like_count": 1406,
            "published_at": "2024-07-03T12:15:14Z",
            "sentiment": "LABEL_2",
            "emotion": "joy"
        },
        {
            "comment_text": "Brazil let's goooo",
            "author": "@Asphalt_GO",
            "like_count": 4,
            "published_at": "2024-07-03T12:13:58Z",
            "sentiment": "LABEL_2",
            "emotion": "neutral"
        }
    ],
    "sentiment_distribution": {
        "LABEL_1": 208,
        "LABEL_0": 305,
        "LABEL_2": 125
    },
    "emotion_distribution": {
        "neutral": 360,
        "disgust": 108,
        "sadness": 32,
        "anger": 47,
        "fear": 16,
        "surprise": 41,
        "joy": 34
    },
    "top_keywords": [
        [
            "rust",
            458
        ],
        [
            "like",
            163
        ],
        [
            "language",
            163
        ],
        [
            "code",
            121
        ],
        [
            "skill",
            82
        ],
        [
            "need",
            77
        ],
        [
            "would",
            69
        ],
        [
            "async",
            68
        ],
        [
            "using",
            66
        ],
        [
            "issue",
            65
        ],
        [
            "error",
            64
        ],
        [
            "time",
            63
        ],
        [
            "people",
            63
        ],
        [
            "community",
            59
        ],
        [
            "make",
            56
        ],
        [
            "good",
            54
        ],
        [
            "really",
            53
        ],
        [
            "much",
            50
        ],
        [
            "write",
            49
        ],
        [
            "know",
            48
        ]
    ],
    "top_active_users": [
        [
            "@jamescomstock7299",
            3
        ],
        [
            "@oliverfoxi",
            3
        ],
        [
            "@stevenhe3462",
            3
        ],
        [
            "@andrewdunbar828",
            3
        ],
        [
            "@squirrel1620",
            2
        ],
        [
            "@mcscubin8935",
            2
        ],
        [
            "@kristofkiekens902",
            2
        ],
        [
            "@guard13007",
            2
        ],
        [
            "@thecollector6746",
            2
        ],
        [
            "@Heater-v1.0.0",
            2
        ]
    ]
}